// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`NamespaceDropdown renders NamespaceDropdown correctly with custom 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <NamespaceDropdown
    disabled={false}
    items={
      Array [
        Object {
          "name": "bookinfo",
        },
        Object {
          "name": "istio-system",
        },
      ]
    }
    namespace=""
    refresh={
      [MockFunction] {
        "calls": Array [
          Array [],
        ],
      }
    }
    setNamespace={[MockFunction]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "disabled": false,
      "handleSelect": [MockFunction],
      "id": "namespace-selector",
      "label": "Select a Namespace",
      "options": Object {
        "bookinfo": "bookinfo",
        "istio-system": "istio-system",
      },
      "useName": true,
      "value": "",
    },
    "ref": null,
    "rendered": null,
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "disabled": false,
        "handleSelect": [MockFunction],
        "id": "namespace-selector",
        "label": "Select a Namespace",
        "options": Object {
          "bookinfo": "bookinfo",
          "istio-system": "istio-system",
        },
        "useName": true,
        "value": "",
      },
      "ref": null,
      "rendered": null,
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`NamespaceDropdown renders NamespaceDropdown correctly without custom 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <NamespaceDropdown
    disabled={false}
    items={Array []}
    namespace=""
    refresh={
      [MockFunction] {
        "calls": Array [
          Array [],
        ],
      }
    }
    setNamespace={[MockFunction]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "disabled": true,
      "handleSelect": [MockFunction],
      "id": "namespace-selector",
      "label": "Select a Namespace",
      "options": Object {},
      "useName": true,
      "value": "",
    },
    "ref": null,
    "rendered": null,
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "disabled": true,
        "handleSelect": [MockFunction],
        "id": "namespace-selector",
        "label": "Select a Namespace",
        "options": Object {},
        "useName": true,
        "value": "",
      },
      "ref": null,
      "rendered": null,
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

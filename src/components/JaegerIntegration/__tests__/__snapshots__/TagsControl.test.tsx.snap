// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`TagsControls renders TagsControl correctly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <TagsControl
    disable={false}
    onChange={[MockFunction]}
    tags=""
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": <FormGroup
        className=""
        fieldId="jaeger-tags"
        helperText={
          <UNDEFINED>
            <Popover
              appendTo={[Function]}
              aria-label=""
              bodyContent={
                <UNDEFINED>
                  Values should be in the
                   
                  <a
                    href="https://brandur.org/logfmt"
                    rel="noopener noreferrer"
                    target="_blank"
                  >
                    logfmt
                  </a>
                   
                  format.
                  <ul>
                    <li>
                      Use space for conjunctions
                    </li>
                    <li>
                      Values containing whitespace should be enclosed in quotes
                    </li>
                  </ul>
                  <code>
                    error=true db.statement="select * from User"
                  </code>
                </UNDEFINED>
              }
              className="f6vm0mb"
              closeBtnAriaLabel="Close"
              enableFlip={true}
              footerContent={null}
              headerContent={null}
              hideOnOutsideClick={true}
              isVisible={null}
              maxWidth="calc(1.5rem + 18.75rem)"
              onHidden={[Function]}
              onHide={[Function]}
              onMount={[Function]}
              onShow={[Function]}
              onShown={[Function]}
              position="right"
              shouldClose={[Function]}
              zIndex={9999}
            >
              <UNDEFINED>
                <Button
                  aria-label={null}
                  className=""
                  component="button"
                  isActive={false}
                  isBlock={false}
                  isDisabled={false}
                  isFocus={false}
                  isHover={false}
                  type="button"
                  variant="plain"
                >
                  <InfoAltIcon
                    color="currentColor"
                    size="sm"
                    title={null}
                  />
                </Button>
                e.g. http.status_code=200 error=true
              </UNDEFINED>
            </Popover>
          </UNDEFINED>
        }
        helperTextInvalid={undefined}
        isInline={false}
        isRequired={false}
        isValid={true}
        label="Tags"
      >
        <TextInput
          aria-label="tagsJaegerTraces"
          className="f6vm0mb"
          isDisabled={false}
          isReadOnly={false}
          isRequired={false}
          isValid={true}
          onChange={[MockFunction]}
          type="text"
          value=""
        />
      </FormGroup>,
      "className": "",
      "isHorizontal": true,
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": <TextInput
          aria-label="tagsJaegerTraces"
          className="f6vm0mb"
          isDisabled={false}
          isReadOnly={false}
          isRequired={false}
          isValid={true}
          onChange={[MockFunction]}
          type="text"
          value=""
        />,
        "className": "",
        "fieldId": "jaeger-tags",
        "helperText": <UNDEFINED>
          <Popover
            appendTo={[Function]}
            aria-label=""
            bodyContent={
              <UNDEFINED>
                Values should be in the
                 
                <a
                  href="https://brandur.org/logfmt"
                  rel="noopener noreferrer"
                  target="_blank"
                >
                  logfmt
                </a>
                 
                format.
                <ul>
                  <li>
                    Use space for conjunctions
                  </li>
                  <li>
                    Values containing whitespace should be enclosed in quotes
                  </li>
                </ul>
                <code>
                  error=true db.statement="select * from User"
                </code>
              </UNDEFINED>
            }
            className="f6vm0mb"
            closeBtnAriaLabel="Close"
            enableFlip={true}
            footerContent={null}
            headerContent={null}
            hideOnOutsideClick={true}
            isVisible={null}
            maxWidth="calc(1.5rem + 18.75rem)"
            onHidden={[Function]}
            onHide={[Function]}
            onMount={[Function]}
            onShow={[Function]}
            onShown={[Function]}
            position="right"
            shouldClose={[Function]}
            zIndex={9999}
          >
            <UNDEFINED>
              <Button
                aria-label={null}
                className=""
                component="button"
                isActive={false}
                isBlock={false}
                isDisabled={false}
                isFocus={false}
                isHover={false}
                type="button"
                variant="plain"
              >
                <InfoAltIcon
                  color="currentColor"
                  size="sm"
                  title={null}
                />
              </Button>
              e.g. http.status_code=200 error=true
            </UNDEFINED>
          </Popover>
        </UNDEFINED>,
        "helperTextInvalid": undefined,
        "isInline": false,
        "isRequired": false,
        "isValid": true,
        "label": "Tags",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "aria-label": "tagsJaegerTraces",
          "className": "f6vm0mb",
          "isDisabled": false,
          "isReadOnly": false,
          "isRequired": false,
          "isValid": true,
          "onChange": [MockFunction],
          "type": "text",
          "value": "",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      "type": [Function],
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": <FormGroup
          className=""
          fieldId="jaeger-tags"
          helperText={
            <UNDEFINED>
              <Popover
                appendTo={[Function]}
                aria-label=""
                bodyContent={
                  <UNDEFINED>
                    Values should be in the
                     
                    <a
                      href="https://brandur.org/logfmt"
                      rel="noopener noreferrer"
                      target="_blank"
                    >
                      logfmt
                    </a>
                     
                    format.
                    <ul>
                      <li>
                        Use space for conjunctions
                      </li>
                      <li>
                        Values containing whitespace should be enclosed in quotes
                      </li>
                    </ul>
                    <code>
                      error=true db.statement="select * from User"
                    </code>
                  </UNDEFINED>
                }
                className="f6vm0mb"
                closeBtnAriaLabel="Close"
                enableFlip={true}
                footerContent={null}
                headerContent={null}
                hideOnOutsideClick={true}
                isVisible={null}
                maxWidth="calc(1.5rem + 18.75rem)"
                onHidden={[Function]}
                onHide={[Function]}
                onMount={[Function]}
                onShow={[Function]}
                onShown={[Function]}
                position="right"
                shouldClose={[Function]}
                zIndex={9999}
              >
                <UNDEFINED>
                  <Button
                    aria-label={null}
                    className=""
                    component="button"
                    isActive={false}
                    isBlock={false}
                    isDisabled={false}
                    isFocus={false}
                    isHover={false}
                    type="button"
                    variant="plain"
                  >
                    <InfoAltIcon
                      color="currentColor"
                      size="sm"
                      title={null}
                    />
                  </Button>
                  e.g. http.status_code=200 error=true
                </UNDEFINED>
              </Popover>
            </UNDEFINED>
          }
          helperTextInvalid={undefined}
          isInline={false}
          isRequired={false}
          isValid={true}
          label="Tags"
        >
          <TextInput
            aria-label="tagsJaegerTraces"
            className="f6vm0mb"
            isDisabled={false}
            isReadOnly={false}
            isRequired={false}
            isValid={true}
            onChange={[MockFunction]}
            type="text"
            value=""
          />
        </FormGroup>,
        "className": "",
        "isHorizontal": true,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": <TextInput
            aria-label="tagsJaegerTraces"
            className="f6vm0mb"
            isDisabled={false}
            isReadOnly={false}
            isRequired={false}
            isValid={true}
            onChange={[MockFunction]}
            type="text"
            value=""
          />,
          "className": "",
          "fieldId": "jaeger-tags",
          "helperText": <UNDEFINED>
            <Popover
              appendTo={[Function]}
              aria-label=""
              bodyContent={
                <UNDEFINED>
                  Values should be in the
                   
                  <a
                    href="https://brandur.org/logfmt"
                    rel="noopener noreferrer"
                    target="_blank"
                  >
                    logfmt
                  </a>
                   
                  format.
                  <ul>
                    <li>
                      Use space for conjunctions
                    </li>
                    <li>
                      Values containing whitespace should be enclosed in quotes
                    </li>
                  </ul>
                  <code>
                    error=true db.statement="select * from User"
                  </code>
                </UNDEFINED>
              }
              className="f6vm0mb"
              closeBtnAriaLabel="Close"
              enableFlip={true}
              footerContent={null}
              headerContent={null}
              hideOnOutsideClick={true}
              isVisible={null}
              maxWidth="calc(1.5rem + 18.75rem)"
              onHidden={[Function]}
              onHide={[Function]}
              onMount={[Function]}
              onShow={[Function]}
              onShown={[Function]}
              position="right"
              shouldClose={[Function]}
              zIndex={9999}
            >
              <UNDEFINED>
                <Button
                  aria-label={null}
                  className=""
                  component="button"
                  isActive={false}
                  isBlock={false}
                  isDisabled={false}
                  isFocus={false}
                  isHover={false}
                  type="button"
                  variant="plain"
                >
                  <InfoAltIcon
                    color="currentColor"
                    size="sm"
                    title={null}
                  />
                </Button>
                e.g. http.status_code=200 error=true
              </UNDEFINED>
            </Popover>
          </UNDEFINED>,
          "helperTextInvalid": undefined,
          "isInline": false,
          "isRequired": false,
          "isValid": true,
          "label": "Tags",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "aria-label": "tagsJaegerTraces",
            "className": "f6vm0mb",
            "isDisabled": false,
            "isReadOnly": false,
            "isRequired": false,
            "isValid": true,
            "onChange": [MockFunction],
            "type": "text",
            "value": "",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": [Function],
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

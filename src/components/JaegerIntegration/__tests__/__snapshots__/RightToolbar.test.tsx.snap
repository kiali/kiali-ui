// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`RightToolbar renders RightToolbar correctly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <RightToolbar
    disabled={false}
    onSubmit={[MockFunction]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": <Button
        active={false}
        block={false}
        bsClass="btn"
        bsSize="lg"
        bsStyle="primary"
        disabled={false}
        onClick={[Function]}
        style={
          Object {
            "fontSize": "15px",
          }
        }
        title="Search"
      >
        <Icon
          name="search"
          type="pf"
        />
         Search
      </Button>,
      "className": "",
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "active": false,
        "block": false,
        "bsClass": "btn",
        "bsSize": "lg",
        "bsStyle": "primary",
        "children": Array [
          <Icon
            name="search"
            type="pf"
          />,
          " Search",
        ],
        "disabled": false,
        "onClick": [Function],
        "style": Object {
          "fontSize": "15px",
        },
        "title": "Search",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "name": "search",
            "type": "pf",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        " Search",
      ],
      "type": [Function],
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": <Button
          active={false}
          block={false}
          bsClass="btn"
          bsSize="lg"
          bsStyle="primary"
          disabled={false}
          onClick={[Function]}
          style={
            Object {
              "fontSize": "15px",
            }
          }
          title="Search"
        >
          <Icon
            name="search"
            type="pf"
          />
           Search
        </Button>,
        "className": "",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "active": false,
          "block": false,
          "bsClass": "btn",
          "bsSize": "lg",
          "bsStyle": "primary",
          "children": Array [
            <Icon
              name="search"
              type="pf"
            />,
            " Search",
          ],
          "disabled": false,
          "onClick": [Function],
          "style": Object {
            "fontSize": "15px",
          },
          "title": "Search",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "name": "search",
              "type": "pf",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          " Search",
        ],
        "type": [Function],
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

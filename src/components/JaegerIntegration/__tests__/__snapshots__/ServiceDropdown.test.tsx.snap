// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`NamespaceDropdown renders ServiceDropdown correctly without custom 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <ServiceDropdown
    activeNamespaces={Array []}
    disabled={false}
    service=""
    setService={[MockFunction]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": Array [
        <Col
          bsClass="col"
          componentClass={[Function]}
          style={
            Object {
              "marginRight": "10px",
            }
          }
        >
          Service :
        </Col>,
        <ToolbarDropdown
          disabled={true}
          handleSelect={[MockFunction]}
          id="namespace-selector"
          label="Select a namespace"
          onToggle={[Function]}
          options={Object {}}
          useName={true}
          value=""
        />,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "bsClass": "col",
          "children": "Service :",
          "componentClass": [Function],
          "style": Object {
            "marginRight": "10px",
          },
        },
        "ref": null,
        "rendered": "Service :",
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "disabled": true,
          "handleSelect": [MockFunction],
          "id": "namespace-selector",
          "label": "Select a namespace",
          "onToggle": [Function],
          "options": Object {},
          "useName": true,
          "value": "",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
    ],
    "type": Symbol(react.fragment),
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <Col
            bsClass="col"
            componentClass={[Function]}
            style={
              Object {
                "marginRight": "10px",
              }
            }
          >
            Service :
          </Col>,
          <ToolbarDropdown
            disabled={true}
            handleSelect={[MockFunction]}
            id="namespace-selector"
            label="Select a namespace"
            onToggle={[Function]}
            options={Object {}}
            useName={true}
            value=""
          />,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "bsClass": "col",
            "children": "Service :",
            "componentClass": [Function],
            "style": Object {
              "marginRight": "10px",
            },
          },
          "ref": null,
          "rendered": "Service :",
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "disabled": true,
            "handleSelect": [MockFunction],
            "id": "namespace-selector",
            "label": "Select a namespace",
            "onToggle": [Function],
            "options": Object {},
            "useName": true,
            "value": "",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": Symbol(react.fragment),
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

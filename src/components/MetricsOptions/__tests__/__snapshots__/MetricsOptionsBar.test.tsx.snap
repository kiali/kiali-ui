// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`MetricsOptionsBar renders initial layout 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <MetricsOptionsBar
    onManualRefresh={[MockFunction]}
    onOptionsChanged={
      [MockFunction] {
        "calls": Array [
          Array [
            Object {
              "byLabelsIn": Array [],
              "byLabelsOut": Array [],
              "duration": 60,
            },
          ],
        ],
      }
    }
    onPollIntervalChanged={
      [MockFunction] {
        "calls": Array [
          Array [
            15000,
          ],
        ],
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": Array [
        <getContext(Filter)>
          <FilterValueSelector
            className=""
            currentValue=""
            filterValues={
              Array [
                "local version",
                "remote service",
                "remote version",
                "response code",
              ]
            }
            id=""
            onFilterValueSelected={[Function]}
            placeholder="Group by"
          />
        </getContext(Filter)>,
        <ToolbarDropdown
          disabled={false}
          handleSelect={[Function]}
          id="metrics_filter_interval_duration"
          initialLabel="Last minute"
          initialValue={60}
          nameDropdown="Duration"
          options={
            Object {
              "10800": "Last 3 hours",
              "1800": "Last 30 minutes",
              "21600": "Last 6 hours",
              "2592000": "Last 30 days",
              "300": "Last 5 minutes",
              "3600": "Last hour",
              "43200": "Last 12 hours",
              "60": "Last minute",
              "600": "Last 10 minutes",
              "604800": "Last 7 days",
              "86400": "Last day",
            }
          }
        />,
        <ToolbarDropdown
          disabled={false}
          handleSelect={[Function]}
          id="metrics_filter_poll_interval"
          initialLabel="15 seconds"
          initialValue={15000}
          nameDropdown="Poll Interval"
          options={
            Object {
              "0": "Pause",
              "10000": "10 seconds",
              "15000": "15 seconds",
              "30000": "30 seconds",
              "300000": "5 minutes",
              "5000": "5 seconds",
              "60000": "1 minute",
            }
          }
        />,
        <ToolbarRightContent
          className=""
        >
          <Button
            active={false}
            block={false}
            bsClass="btn"
            bsStyle="default"
            disabled={false}
            onClick={[MockFunction]}
          >
            <Icon
              name="refresh"
              type="fa"
            />
          </Button>
        </ToolbarRightContent>,
        false,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": <FilterValueSelector
            className=""
            currentValue=""
            filterValues={
              Array [
                "local version",
                "remote service",
                "remote version",
                "response code",
              ]
            }
            id=""
            onFilterValueSelected={[Function]}
            placeholder="Group by"
          />,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "className": "",
            "currentValue": "",
            "filterValues": Array [
              "local version",
              "remote service",
              "remote version",
              "response code",
            ],
            "id": "",
            "onFilterValueSelected": [Function],
            "placeholder": "Group by",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "disabled": false,
          "handleSelect": [Function],
          "id": "metrics_filter_interval_duration",
          "initialLabel": "Last minute",
          "initialValue": 60,
          "nameDropdown": "Duration",
          "options": Object {
            "10800": "Last 3 hours",
            "1800": "Last 30 minutes",
            "21600": "Last 6 hours",
            "2592000": "Last 30 days",
            "300": "Last 5 minutes",
            "3600": "Last hour",
            "43200": "Last 12 hours",
            "60": "Last minute",
            "600": "Last 10 minutes",
            "604800": "Last 7 days",
            "86400": "Last day",
          },
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "disabled": false,
          "handleSelect": [Function],
          "id": "metrics_filter_poll_interval",
          "initialLabel": "15 seconds",
          "initialValue": 15000,
          "nameDropdown": "Poll Interval",
          "options": Object {
            "0": "Pause",
            "10000": "10 seconds",
            "15000": "15 seconds",
            "30000": "30 seconds",
            "300000": "5 minutes",
            "5000": "5 seconds",
            "60000": "1 minute",
          },
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": <Button
            active={false}
            block={false}
            bsClass="btn"
            bsStyle="default"
            disabled={false}
            onClick={[MockFunction]}
          >
            <Icon
              name="refresh"
              type="fa"
            />
          </Button>,
          "className": "",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "active": false,
            "block": false,
            "bsClass": "btn",
            "bsStyle": "default",
            "children": <Icon
              name="refresh"
              type="fa"
            />,
            "disabled": false,
            "onClick": [MockFunction],
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "name": "refresh",
              "type": "fa",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": [Function],
        },
        "type": [Function],
      },
      false,
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          <getContext(Filter)>
            <FilterValueSelector
              className=""
              currentValue=""
              filterValues={
                Array [
                  "local version",
                  "remote service",
                  "remote version",
                  "response code",
                ]
              }
              id=""
              onFilterValueSelected={[Function]}
              placeholder="Group by"
            />
          </getContext(Filter)>,
          <ToolbarDropdown
            disabled={false}
            handleSelect={[Function]}
            id="metrics_filter_interval_duration"
            initialLabel="Last minute"
            initialValue={60}
            nameDropdown="Duration"
            options={
              Object {
                "10800": "Last 3 hours",
                "1800": "Last 30 minutes",
                "21600": "Last 6 hours",
                "2592000": "Last 30 days",
                "300": "Last 5 minutes",
                "3600": "Last hour",
                "43200": "Last 12 hours",
                "60": "Last minute",
                "600": "Last 10 minutes",
                "604800": "Last 7 days",
                "86400": "Last day",
              }
            }
          />,
          <ToolbarDropdown
            disabled={false}
            handleSelect={[Function]}
            id="metrics_filter_poll_interval"
            initialLabel="15 seconds"
            initialValue={15000}
            nameDropdown="Poll Interval"
            options={
              Object {
                "0": "Pause",
                "10000": "10 seconds",
                "15000": "15 seconds",
                "30000": "30 seconds",
                "300000": "5 minutes",
                "5000": "5 seconds",
                "60000": "1 minute",
              }
            }
          />,
          <ToolbarRightContent
            className=""
          >
            <Button
              active={false}
              block={false}
              bsClass="btn"
              bsStyle="default"
              disabled={false}
              onClick={[MockFunction]}
            >
              <Icon
                name="refresh"
                type="fa"
              />
            </Button>
          </ToolbarRightContent>,
          false,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": <FilterValueSelector
              className=""
              currentValue=""
              filterValues={
                Array [
                  "local version",
                  "remote service",
                  "remote version",
                  "response code",
                ]
              }
              id=""
              onFilterValueSelected={[Function]}
              placeholder="Group by"
            />,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "className": "",
              "currentValue": "",
              "filterValues": Array [
                "local version",
                "remote service",
                "remote version",
                "response code",
              ],
              "id": "",
              "onFilterValueSelected": [Function],
              "placeholder": "Group by",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "disabled": false,
            "handleSelect": [Function],
            "id": "metrics_filter_interval_duration",
            "initialLabel": "Last minute",
            "initialValue": 60,
            "nameDropdown": "Duration",
            "options": Object {
              "10800": "Last 3 hours",
              "1800": "Last 30 minutes",
              "21600": "Last 6 hours",
              "2592000": "Last 30 days",
              "300": "Last 5 minutes",
              "3600": "Last hour",
              "43200": "Last 12 hours",
              "60": "Last minute",
              "600": "Last 10 minutes",
              "604800": "Last 7 days",
              "86400": "Last day",
            },
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "disabled": false,
            "handleSelect": [Function],
            "id": "metrics_filter_poll_interval",
            "initialLabel": "15 seconds",
            "initialValue": 15000,
            "nameDropdown": "Poll Interval",
            "options": Object {
              "0": "Pause",
              "10000": "10 seconds",
              "15000": "15 seconds",
              "30000": "30 seconds",
              "300000": "5 minutes",
              "5000": "5 seconds",
              "60000": "1 minute",
            },
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": <Button
              active={false}
              block={false}
              bsClass="btn"
              bsStyle="default"
              disabled={false}
              onClick={[MockFunction]}
            >
              <Icon
                name="refresh"
                type="fa"
              />
            </Button>,
            "className": "",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "active": false,
              "block": false,
              "bsClass": "btn",
              "bsStyle": "default",
              "children": <Icon
                name="refresh"
                type="fa"
              />,
              "disabled": false,
              "onClick": [MockFunction],
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "name": "refresh",
                "type": "fa",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": [Function],
          },
          "type": [Function],
        },
        false,
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;

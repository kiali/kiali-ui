// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`MetricsOptionsBar renders initial layout 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Provider
    store={
      Object {
        "dispatch": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
        Symbol(observable): [Function],
      }
    }
  >
    <MetricsOptionsBar
      direction={0}
      duration={60}
      labelValues={Map {}}
      metricReporter="destination"
      onLabelsFiltersChanged={[MockFunction]}
      onOptionsChanged={[MockFunction]}
      onRefresh={[MockFunction]}
      onReporterChanged={[MockFunction]}
      onUpdatePollInterval={[MockFunction]}
      setDuration={[MockFunction]}
    />
  </Provider>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "direction": 0,
      "duration": 60,
      "labelValues": Map {},
      "metricReporter": "destination",
      "onLabelsFiltersChanged": [MockFunction],
      "onOptionsChanged": [MockFunction],
      "onRefresh": [MockFunction],
      "onReporterChanged": [MockFunction],
      "onUpdatePollInterval": [MockFunction],
      "setDuration": [MockFunction],
    },
    "ref": null,
    "rendered": null,
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "direction": 0,
        "duration": 60,
        "labelValues": Map {},
        "metricReporter": "destination",
        "onLabelsFiltersChanged": [MockFunction],
        "onOptionsChanged": [MockFunction],
        "onRefresh": [MockFunction],
        "onReporterChanged": [MockFunction],
        "onUpdatePollInterval": [MockFunction],
        "setDuration": [MockFunction],
      },
      "ref": null,
      "rendered": null,
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

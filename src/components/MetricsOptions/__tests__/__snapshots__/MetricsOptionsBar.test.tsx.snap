// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`MetricsOptionsBar renders initial layout 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <MetricsOptionsBar
    direction={0}
    labelValues={Map {}}
    metricReporter="destination"
    onLabelsFiltersChanged={[MockFunction]}
    onOptionsChanged={
      [MockFunction] {
        "calls": Array [
          Array [
            Object {
              "avg": true,
              "byLabelsIn": Array [],
              "byLabelsOut": Array [],
              "duration": 60,
              "quantiles": Array [
                "0.5",
                "0.95",
                "0.99",
              ],
            },
          ],
        ],
      }
    }
    onRefresh={[MockFunction]}
    onReporterChanged={[MockFunction]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": Array [
        <FormGroup
          bsClass="form-group"
        >
          <MetricsSettingsDropdown
            activeLabels={Array []}
            labelValues={Map {}}
            onChanged={[Function]}
            onLabelsFiltersChanged={[MockFunction]}
            showAverage={true}
            showQuantiles={
              Array [
                "0.5",
                "0.95",
                "0.99",
              ]
            }
          />
        </FormGroup>,
        <FormGroup
          bsClass="form-group"
        >
          <ToolbarDropdown
            disabled={false}
            handleSelect={[Function]}
            id="metrics_filter_reporter"
            initialLabel="Destination"
            nameDropdown="Reported from"
            options={
              Object {
                "destination": "Destination",
                "source": "Source",
              }
            }
            value="destination"
          />
        </FormGroup>,
        <ToolbarDropdown
          disabled={false}
          handleSelect={[Function]}
          id="metrics_filter_interval_duration"
          initialLabel="Last min"
          initialValue={60}
          nameDropdown="Displaying"
          options={
            Object {
              "10800": "Last 3 hours",
              "1800": "Last 30 min",
              "21600": "Last 6 hours",
              "2592000": "Last 30 days",
              "300": "Last 5 min",
              "3600": "Last hour",
              "43200": "Last 12 hours",
              "60": "Last min",
              "600": "Last 10 min",
              "604800": "Last 7 days",
              "86400": "Last day",
            }
          }
        />,
        <ToolbarRightContent
          className=""
        >
          <Refresh
            handleRefresh={[MockFunction]}
            id="metrics-refresh"
            onSelect={[Function]}
            pollInterval={15000}
          />
        </ToolbarRightContent>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "bsClass": "form-group",
          "children": <MetricsSettingsDropdown
            activeLabels={Array []}
            labelValues={Map {}}
            onChanged={[Function]}
            onLabelsFiltersChanged={[MockFunction]}
            showAverage={true}
            showQuantiles={
              Array [
                "0.5",
                "0.95",
                "0.99",
              ]
            }
          />,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "activeLabels": Array [],
            "labelValues": Map {},
            "onChanged": [Function],
            "onLabelsFiltersChanged": [MockFunction],
            "showAverage": true,
            "showQuantiles": Array [
              "0.5",
              "0.95",
              "0.99",
            ],
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "bsClass": "form-group",
          "children": <ToolbarDropdown
            disabled={false}
            handleSelect={[Function]}
            id="metrics_filter_reporter"
            initialLabel="Destination"
            nameDropdown="Reported from"
            options={
              Object {
                "destination": "Destination",
                "source": "Source",
              }
            }
            value="destination"
          />,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "disabled": false,
            "handleSelect": [Function],
            "id": "metrics_filter_reporter",
            "initialLabel": "Destination",
            "nameDropdown": "Reported from",
            "options": Object {
              "destination": "Destination",
              "source": "Source",
            },
            "value": "destination",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "disabled": false,
          "handleSelect": [Function],
          "id": "metrics_filter_interval_duration",
          "initialLabel": "Last min",
          "initialValue": 60,
          "nameDropdown": "Displaying",
          "options": Object {
            "10800": "Last 3 hours",
            "1800": "Last 30 min",
            "21600": "Last 6 hours",
            "2592000": "Last 30 days",
            "300": "Last 5 min",
            "3600": "Last hour",
            "43200": "Last 12 hours",
            "60": "Last min",
            "600": "Last 10 min",
            "604800": "Last 7 days",
            "86400": "Last day",
          },
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": <Refresh
            handleRefresh={[MockFunction]}
            id="metrics-refresh"
            onSelect={[Function]}
            pollInterval={15000}
          />,
          "className": "",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "handleRefresh": [MockFunction],
            "id": "metrics-refresh",
            "onSelect": [Function],
            "pollInterval": 15000,
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": [Function],
      },
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          <FormGroup
            bsClass="form-group"
          >
            <MetricsSettingsDropdown
              activeLabels={Array []}
              labelValues={Map {}}
              onChanged={[Function]}
              onLabelsFiltersChanged={[MockFunction]}
              showAverage={true}
              showQuantiles={
                Array [
                  "0.5",
                  "0.95",
                  "0.99",
                ]
              }
            />
          </FormGroup>,
          <FormGroup
            bsClass="form-group"
          >
            <ToolbarDropdown
              disabled={false}
              handleSelect={[Function]}
              id="metrics_filter_reporter"
              initialLabel="Destination"
              nameDropdown="Reported from"
              options={
                Object {
                  "destination": "Destination",
                  "source": "Source",
                }
              }
              value="destination"
            />
          </FormGroup>,
          <ToolbarDropdown
            disabled={false}
            handleSelect={[Function]}
            id="metrics_filter_interval_duration"
            initialLabel="Last min"
            initialValue={60}
            nameDropdown="Displaying"
            options={
              Object {
                "10800": "Last 3 hours",
                "1800": "Last 30 min",
                "21600": "Last 6 hours",
                "2592000": "Last 30 days",
                "300": "Last 5 min",
                "3600": "Last hour",
                "43200": "Last 12 hours",
                "60": "Last min",
                "600": "Last 10 min",
                "604800": "Last 7 days",
                "86400": "Last day",
              }
            }
          />,
          <ToolbarRightContent
            className=""
          >
            <Refresh
              handleRefresh={[MockFunction]}
              id="metrics-refresh"
              onSelect={[Function]}
              pollInterval={15000}
            />
          </ToolbarRightContent>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "bsClass": "form-group",
            "children": <MetricsSettingsDropdown
              activeLabels={Array []}
              labelValues={Map {}}
              onChanged={[Function]}
              onLabelsFiltersChanged={[MockFunction]}
              showAverage={true}
              showQuantiles={
                Array [
                  "0.5",
                  "0.95",
                  "0.99",
                ]
              }
            />,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "activeLabels": Array [],
              "labelValues": Map {},
              "onChanged": [Function],
              "onLabelsFiltersChanged": [MockFunction],
              "showAverage": true,
              "showQuantiles": Array [
                "0.5",
                "0.95",
                "0.99",
              ],
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "bsClass": "form-group",
            "children": <ToolbarDropdown
              disabled={false}
              handleSelect={[Function]}
              id="metrics_filter_reporter"
              initialLabel="Destination"
              nameDropdown="Reported from"
              options={
                Object {
                  "destination": "Destination",
                  "source": "Source",
                }
              }
              value="destination"
            />,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "disabled": false,
              "handleSelect": [Function],
              "id": "metrics_filter_reporter",
              "initialLabel": "Destination",
              "nameDropdown": "Reported from",
              "options": Object {
                "destination": "Destination",
                "source": "Source",
              },
              "value": "destination",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "disabled": false,
            "handleSelect": [Function],
            "id": "metrics_filter_interval_duration",
            "initialLabel": "Last min",
            "initialValue": 60,
            "nameDropdown": "Displaying",
            "options": Object {
              "10800": "Last 3 hours",
              "1800": "Last 30 min",
              "21600": "Last 6 hours",
              "2592000": "Last 30 days",
              "300": "Last 5 min",
              "3600": "Last hour",
              "43200": "Last 12 hours",
              "60": "Last min",
              "600": "Last 10 min",
              "604800": "Last 7 days",
              "86400": "Last day",
            },
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": <Refresh
              handleRefresh={[MockFunction]}
              id="metrics-refresh"
              onSelect={[Function]}
              pollInterval={15000}
            />,
            "className": "",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "handleRefresh": [MockFunction],
              "id": "metrics-refresh",
              "onSelect": [Function],
              "pollInterval": 15000,
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": [Function],
        },
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

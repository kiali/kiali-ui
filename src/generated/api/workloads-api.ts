/* tslint:disable */
/* eslint-disable */
/**
 * Kiali
 * Kiali project, observability for the Istio service mesh
 *
 * The version of the OpenAPI document: _
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction
} from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { InlineResponse400 } from '../models';
// @ts-ignore
import { InlineResponse404 } from '../models';
// @ts-ignore
import { InlineResponse500 } from '../models';
// @ts-ignore
import { InlineResponse503 } from '../models';
// @ts-ignore
import { MonitoringDashboard } from '../models';
// @ts-ignore
import { Workload } from '../models';
// @ts-ignore
import { WorkloadHealth } from '../models';
// @ts-ignore
import { WorkloadList } from '../models';
/**
 * WorkloadsApi - axios parameter creator
 * @export
 */
export const WorkloadsApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * Endpoint to fetch dashboard to be displayed, related to a single workload
     * @param {string} namespace The namespace name.
     * @param {string} workload The workload name.
     * @param {boolean} [avg] Flag for fetching histogram average. Default is true.
     * @param {Array<string>} [byLabels] List of labels to use for grouping metrics (via Prometheus \&#39;by\&#39; clause).
     * @param {string} [direction] Traffic direction: \&#39;inbound\&#39; or \&#39;outbound\&#39;.
     * @param {number} [duration] Duration of the query period, in seconds.
     * @param {Array<string>} [quantiles] List of quantiles to fetch. Fetch no quantiles when empty. Ex: [0.5, 0.95, 0.99].
     * @param {string} [rateFunc] Prometheus function used to calculate rate: \&#39;rate\&#39; or \&#39;irate\&#39;.
     * @param {string} [rateInterval] Interval used for rate and histogram calculation.
     * @param {string} [requestProtocol] Desired request protocol for the telemetry: For example, \&#39;http\&#39; or \&#39;grpc\&#39;.
     * @param {string} [reporter] Istio telemetry reporter: \&#39;source\&#39; or \&#39;destination\&#39;.
     * @param {number} [step] Step between [graph] datapoints, in seconds.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workloadDashboard: async (
      namespace: string,
      workload: string,
      avg?: boolean,
      byLabels?: Array<string>,
      direction?: string,
      duration?: number,
      quantiles?: Array<string>,
      rateFunc?: string,
      rateInterval?: string,
      requestProtocol?: string,
      reporter?: string,
      step?: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'namespace' is not null or undefined
      assertParamExists('workloadDashboard', 'namespace', namespace);
      // verify required parameter 'workload' is not null or undefined
      assertParamExists('workloadDashboard', 'workload', workload);
      const localVarPath = `/namespaces/{namespace}/workloads/{workload}/dashboard`
        .replace(`{${'namespace'}}`, encodeURIComponent(String(namespace)))
        .replace(`{${'workload'}}`, encodeURIComponent(String(workload)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (avg !== undefined) {
        localVarQueryParameter['avg'] = avg;
      }

      if (byLabels) {
        localVarQueryParameter['byLabels[]'] = byLabels.join(COLLECTION_FORMATS.csv);
      }

      if (direction !== undefined) {
        localVarQueryParameter['direction'] = direction;
      }

      if (duration !== undefined) {
        localVarQueryParameter['duration'] = duration;
      }

      if (quantiles) {
        localVarQueryParameter['quantiles[]'] = quantiles.join(COLLECTION_FORMATS.csv);
      }

      if (rateFunc !== undefined) {
        localVarQueryParameter['rateFunc'] = rateFunc;
      }

      if (rateInterval !== undefined) {
        localVarQueryParameter['rateInterval'] = rateInterval;
      }

      if (requestProtocol !== undefined) {
        localVarQueryParameter['requestProtocol'] = requestProtocol;
      }

      if (reporter !== undefined) {
        localVarQueryParameter['reporter'] = reporter;
      }

      if (step !== undefined) {
        localVarQueryParameter['step'] = step;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Endpoint to get the workload details
     * @param {string} namespace The namespace name.
     * @param {string} workload The workload name.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workloadDetails: async (namespace: string, workload: string, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'namespace' is not null or undefined
      assertParamExists('workloadDetails', 'namespace', namespace);
      // verify required parameter 'workload' is not null or undefined
      assertParamExists('workloadDetails', 'workload', workload);
      const localVarPath = `/namespaces/{namespace}/workloads/{workload}`
        .replace(`{${'namespace'}}`, encodeURIComponent(String(namespace)))
        .replace(`{${'workload'}}`, encodeURIComponent(String(workload)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Get health associated to the given workload
     * @param {string} namespace The namespace scope
     * @param {string} workload The target workload
     * @param {string} [rateInterval] The rate interval used for fetching error rate
     * @param {string} [queryTime] The time to use for the prometheus query
     * @param {string} [type]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workloadHealth: async (
      namespace: string,
      workload: string,
      rateInterval?: string,
      queryTime?: string,
      type?: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'namespace' is not null or undefined
      assertParamExists('workloadHealth', 'namespace', namespace);
      // verify required parameter 'workload' is not null or undefined
      assertParamExists('workloadHealth', 'workload', workload);
      const localVarPath = `/namespaces/{namespace}/workloads/{workload}/health`
        .replace(`{${'namespace'}}`, encodeURIComponent(String(namespace)))
        .replace(`{${'workload'}}`, encodeURIComponent(String(workload)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (rateInterval !== undefined) {
        localVarQueryParameter['rateInterval'] = rateInterval;
      }

      if (queryTime !== undefined) {
        localVarQueryParameter['QueryTime'] =
          (queryTime as any) instanceof Date ? (queryTime as any).toISOString() : queryTime;
      }

      if (type !== undefined) {
        localVarQueryParameter['type'] = type;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Endpoint to get the list of workloads for a namespace
     * @param {string} namespace The namespace name.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workloadList: async (namespace: string, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'namespace' is not null or undefined
      assertParamExists('workloadList', 'namespace', namespace);
      const localVarPath = `/namespaces/{namespace}/workloads`.replace(
        `{${'namespace'}}`,
        encodeURIComponent(String(namespace))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Endpoint to fetch metrics to be displayed, related to a single workload
     * @param {string} namespace The namespace name.
     * @param {string} workload The workload name.
     * @param {boolean} [avg] Flag for fetching histogram average. Default is true.
     * @param {Array<string>} [byLabels] List of labels to use for grouping metrics (via Prometheus \&#39;by\&#39; clause).
     * @param {string} [direction] Traffic direction: \&#39;inbound\&#39; or \&#39;outbound\&#39;.
     * @param {number} [duration] Duration of the query period, in seconds.
     * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are Kiali internal metric names.
     * @param {Array<string>} [quantiles] List of quantiles to fetch. Fetch no quantiles when empty. Ex: [0.5, 0.95, 0.99].
     * @param {string} [rateFunc] Prometheus function used to calculate rate: \&#39;rate\&#39; or \&#39;irate\&#39;.
     * @param {string} [rateInterval] Interval used for rate and histogram calculation.
     * @param {string} [requestProtocol] Desired request protocol for the telemetry: For example, \&#39;http\&#39; or \&#39;grpc\&#39;.
     * @param {string} [reporter] Istio telemetry reporter: \&#39;source\&#39; or \&#39;destination\&#39;.
     * @param {number} [step] Step between [graph] datapoints, in seconds.
     * @param {string} [version] Filters metrics by the specified version.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workloadMetrics: async (
      namespace: string,
      workload: string,
      avg?: boolean,
      byLabels?: Array<string>,
      direction?: string,
      duration?: number,
      filters?: Array<string>,
      quantiles?: Array<string>,
      rateFunc?: string,
      rateInterval?: string,
      requestProtocol?: string,
      reporter?: string,
      step?: number,
      version?: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'namespace' is not null or undefined
      assertParamExists('workloadMetrics', 'namespace', namespace);
      // verify required parameter 'workload' is not null or undefined
      assertParamExists('workloadMetrics', 'workload', workload);
      const localVarPath = `/namespaces/{namespace}/workloads/{workload}/metrics`
        .replace(`{${'namespace'}}`, encodeURIComponent(String(namespace)))
        .replace(`{${'workload'}}`, encodeURIComponent(String(workload)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (avg !== undefined) {
        localVarQueryParameter['avg'] = avg;
      }

      if (byLabels) {
        localVarQueryParameter['byLabels[]'] = byLabels.join(COLLECTION_FORMATS.csv);
      }

      if (direction !== undefined) {
        localVarQueryParameter['direction'] = direction;
      }

      if (duration !== undefined) {
        localVarQueryParameter['duration'] = duration;
      }

      if (filters) {
        localVarQueryParameter['filters[]'] = filters.join(COLLECTION_FORMATS.csv);
      }

      if (quantiles) {
        localVarQueryParameter['quantiles[]'] = quantiles.join(COLLECTION_FORMATS.csv);
      }

      if (rateFunc !== undefined) {
        localVarQueryParameter['rateFunc'] = rateFunc;
      }

      if (rateInterval !== undefined) {
        localVarQueryParameter['rateInterval'] = rateInterval;
      }

      if (requestProtocol !== undefined) {
        localVarQueryParameter['requestProtocol'] = requestProtocol;
      }

      if (reporter !== undefined) {
        localVarQueryParameter['reporter'] = reporter;
      }

      if (step !== undefined) {
        localVarQueryParameter['step'] = step;
      }

      if (version !== undefined) {
        localVarQueryParameter['version'] = version;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary Endpoint to update the Workload configuration using Json Merge Patch strategy.
     * @param {string} namespace The namespace name.
     * @param {string} workload The workload name.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workloadUpdate: async (namespace: string, workload: string, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'namespace' is not null or undefined
      assertParamExists('workloadUpdate', 'namespace', namespace);
      // verify required parameter 'workload' is not null or undefined
      assertParamExists('workloadUpdate', 'workload', workload);
      const localVarPath = `/namespaces/{namespace}/workloads/{workload}`
        .replace(`{${'namespace'}}`, encodeURIComponent(String(namespace)))
        .replace(`{${'workload'}}`, encodeURIComponent(String(workload)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};

/**
 * WorkloadsApi - functional programming interface
 * @export
 */
export const WorkloadsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = WorkloadsApiAxiosParamCreator(configuration);
  return {
    /**
     * Endpoint to fetch dashboard to be displayed, related to a single workload
     * @param {string} namespace The namespace name.
     * @param {string} workload The workload name.
     * @param {boolean} [avg] Flag for fetching histogram average. Default is true.
     * @param {Array<string>} [byLabels] List of labels to use for grouping metrics (via Prometheus \&#39;by\&#39; clause).
     * @param {string} [direction] Traffic direction: \&#39;inbound\&#39; or \&#39;outbound\&#39;.
     * @param {number} [duration] Duration of the query period, in seconds.
     * @param {Array<string>} [quantiles] List of quantiles to fetch. Fetch no quantiles when empty. Ex: [0.5, 0.95, 0.99].
     * @param {string} [rateFunc] Prometheus function used to calculate rate: \&#39;rate\&#39; or \&#39;irate\&#39;.
     * @param {string} [rateInterval] Interval used for rate and histogram calculation.
     * @param {string} [requestProtocol] Desired request protocol for the telemetry: For example, \&#39;http\&#39; or \&#39;grpc\&#39;.
     * @param {string} [reporter] Istio telemetry reporter: \&#39;source\&#39; or \&#39;destination\&#39;.
     * @param {number} [step] Step between [graph] datapoints, in seconds.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async workloadDashboard(
      namespace: string,
      workload: string,
      avg?: boolean,
      byLabels?: Array<string>,
      direction?: string,
      duration?: number,
      quantiles?: Array<string>,
      rateFunc?: string,
      rateInterval?: string,
      requestProtocol?: string,
      reporter?: string,
      step?: number,
      options?: any
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MonitoringDashboard>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.workloadDashboard(
        namespace,
        workload,
        avg,
        byLabels,
        direction,
        duration,
        quantiles,
        rateFunc,
        rateInterval,
        requestProtocol,
        reporter,
        step,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * Endpoint to get the workload details
     * @param {string} namespace The namespace name.
     * @param {string} workload The workload name.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async workloadDetails(
      namespace: string,
      workload: string,
      options?: any
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Workload>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.workloadDetails(namespace, workload, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * Get health associated to the given workload
     * @param {string} namespace The namespace scope
     * @param {string} workload The target workload
     * @param {string} [rateInterval] The rate interval used for fetching error rate
     * @param {string} [queryTime] The time to use for the prometheus query
     * @param {string} [type]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async workloadHealth(
      namespace: string,
      workload: string,
      rateInterval?: string,
      queryTime?: string,
      type?: string,
      options?: any
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkloadHealth>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.workloadHealth(
        namespace,
        workload,
        rateInterval,
        queryTime,
        type,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * Endpoint to get the list of workloads for a namespace
     * @param {string} namespace The namespace name.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async workloadList(
      namespace: string,
      options?: any
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkloadList>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.workloadList(namespace, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * Endpoint to fetch metrics to be displayed, related to a single workload
     * @param {string} namespace The namespace name.
     * @param {string} workload The workload name.
     * @param {boolean} [avg] Flag for fetching histogram average. Default is true.
     * @param {Array<string>} [byLabels] List of labels to use for grouping metrics (via Prometheus \&#39;by\&#39; clause).
     * @param {string} [direction] Traffic direction: \&#39;inbound\&#39; or \&#39;outbound\&#39;.
     * @param {number} [duration] Duration of the query period, in seconds.
     * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are Kiali internal metric names.
     * @param {Array<string>} [quantiles] List of quantiles to fetch. Fetch no quantiles when empty. Ex: [0.5, 0.95, 0.99].
     * @param {string} [rateFunc] Prometheus function used to calculate rate: \&#39;rate\&#39; or \&#39;irate\&#39;.
     * @param {string} [rateInterval] Interval used for rate and histogram calculation.
     * @param {string} [requestProtocol] Desired request protocol for the telemetry: For example, \&#39;http\&#39; or \&#39;grpc\&#39;.
     * @param {string} [reporter] Istio telemetry reporter: \&#39;source\&#39; or \&#39;destination\&#39;.
     * @param {number} [step] Step between [graph] datapoints, in seconds.
     * @param {string} [version] Filters metrics by the specified version.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async workloadMetrics(
      namespace: string,
      workload: string,
      avg?: boolean,
      byLabels?: Array<string>,
      direction?: string,
      duration?: number,
      filters?: Array<string>,
      quantiles?: Array<string>,
      rateFunc?: string,
      rateInterval?: string,
      requestProtocol?: string,
      reporter?: string,
      step?: number,
      version?: string,
      options?: any
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: Array<Metric> }>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.workloadMetrics(
        namespace,
        workload,
        avg,
        byLabels,
        direction,
        duration,
        filters,
        quantiles,
        rateFunc,
        rateInterval,
        requestProtocol,
        reporter,
        step,
        version,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Endpoint to update the Workload configuration using Json Merge Patch strategy.
     * @param {string} namespace The namespace name.
     * @param {string} workload The workload name.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async workloadUpdate(
      namespace: string,
      workload: string,
      options?: any
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Workload>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.workloadUpdate(namespace, workload, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    }
  };
};

/**
 * WorkloadsApi - factory interface
 * @export
 */
export const WorkloadsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = WorkloadsApiFp(configuration);
  return {
    /**
     * Endpoint to fetch dashboard to be displayed, related to a single workload
     * @param {string} namespace The namespace name.
     * @param {string} workload The workload name.
     * @param {boolean} [avg] Flag for fetching histogram average. Default is true.
     * @param {Array<string>} [byLabels] List of labels to use for grouping metrics (via Prometheus \&#39;by\&#39; clause).
     * @param {string} [direction] Traffic direction: \&#39;inbound\&#39; or \&#39;outbound\&#39;.
     * @param {number} [duration] Duration of the query period, in seconds.
     * @param {Array<string>} [quantiles] List of quantiles to fetch. Fetch no quantiles when empty. Ex: [0.5, 0.95, 0.99].
     * @param {string} [rateFunc] Prometheus function used to calculate rate: \&#39;rate\&#39; or \&#39;irate\&#39;.
     * @param {string} [rateInterval] Interval used for rate and histogram calculation.
     * @param {string} [requestProtocol] Desired request protocol for the telemetry: For example, \&#39;http\&#39; or \&#39;grpc\&#39;.
     * @param {string} [reporter] Istio telemetry reporter: \&#39;source\&#39; or \&#39;destination\&#39;.
     * @param {number} [step] Step between [graph] datapoints, in seconds.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workloadDashboard(
      namespace: string,
      workload: string,
      avg?: boolean,
      byLabels?: Array<string>,
      direction?: string,
      duration?: number,
      quantiles?: Array<string>,
      rateFunc?: string,
      rateInterval?: string,
      requestProtocol?: string,
      reporter?: string,
      step?: number,
      options?: any
    ): AxiosPromise<MonitoringDashboard> {
      return localVarFp
        .workloadDashboard(
          namespace,
          workload,
          avg,
          byLabels,
          direction,
          duration,
          quantiles,
          rateFunc,
          rateInterval,
          requestProtocol,
          reporter,
          step,
          options
        )
        .then(request => request(axios, basePath));
    },
    /**
     * Endpoint to get the workload details
     * @param {string} namespace The namespace name.
     * @param {string} workload The workload name.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workloadDetails(namespace: string, workload: string, options?: any): AxiosPromise<Workload> {
      return localVarFp.workloadDetails(namespace, workload, options).then(request => request(axios, basePath));
    },
    /**
     * Get health associated to the given workload
     * @param {string} namespace The namespace scope
     * @param {string} workload The target workload
     * @param {string} [rateInterval] The rate interval used for fetching error rate
     * @param {string} [queryTime] The time to use for the prometheus query
     * @param {string} [type]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workloadHealth(
      namespace: string,
      workload: string,
      rateInterval?: string,
      queryTime?: string,
      type?: string,
      options?: any
    ): AxiosPromise<WorkloadHealth> {
      return localVarFp
        .workloadHealth(namespace, workload, rateInterval, queryTime, type, options)
        .then(request => request(axios, basePath));
    },
    /**
     * Endpoint to get the list of workloads for a namespace
     * @param {string} namespace The namespace name.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workloadList(namespace: string, options?: any): AxiosPromise<WorkloadList> {
      return localVarFp.workloadList(namespace, options).then(request => request(axios, basePath));
    },
    /**
     * Endpoint to fetch metrics to be displayed, related to a single workload
     * @param {string} namespace The namespace name.
     * @param {string} workload The workload name.
     * @param {boolean} [avg] Flag for fetching histogram average. Default is true.
     * @param {Array<string>} [byLabels] List of labels to use for grouping metrics (via Prometheus \&#39;by\&#39; clause).
     * @param {string} [direction] Traffic direction: \&#39;inbound\&#39; or \&#39;outbound\&#39;.
     * @param {number} [duration] Duration of the query period, in seconds.
     * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are Kiali internal metric names.
     * @param {Array<string>} [quantiles] List of quantiles to fetch. Fetch no quantiles when empty. Ex: [0.5, 0.95, 0.99].
     * @param {string} [rateFunc] Prometheus function used to calculate rate: \&#39;rate\&#39; or \&#39;irate\&#39;.
     * @param {string} [rateInterval] Interval used for rate and histogram calculation.
     * @param {string} [requestProtocol] Desired request protocol for the telemetry: For example, \&#39;http\&#39; or \&#39;grpc\&#39;.
     * @param {string} [reporter] Istio telemetry reporter: \&#39;source\&#39; or \&#39;destination\&#39;.
     * @param {number} [step] Step between [graph] datapoints, in seconds.
     * @param {string} [version] Filters metrics by the specified version.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workloadMetrics(
      namespace: string,
      workload: string,
      avg?: boolean,
      byLabels?: Array<string>,
      direction?: string,
      duration?: number,
      filters?: Array<string>,
      quantiles?: Array<string>,
      rateFunc?: string,
      rateInterval?: string,
      requestProtocol?: string,
      reporter?: string,
      step?: number,
      version?: string,
      options?: any
    ): AxiosPromise<{ [key: string]: Array<Metric> }> {
      return localVarFp
        .workloadMetrics(
          namespace,
          workload,
          avg,
          byLabels,
          direction,
          duration,
          filters,
          quantiles,
          rateFunc,
          rateInterval,
          requestProtocol,
          reporter,
          step,
          version,
          options
        )
        .then(request => request(axios, basePath));
    },
    /**
     *
     * @summary Endpoint to update the Workload configuration using Json Merge Patch strategy.
     * @param {string} namespace The namespace name.
     * @param {string} workload The workload name.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workloadUpdate(namespace: string, workload: string, options?: any): AxiosPromise<Workload> {
      return localVarFp.workloadUpdate(namespace, workload, options).then(request => request(axios, basePath));
    }
  };
};

/**
 * WorkloadsApi - object-oriented interface
 * @export
 * @class WorkloadsApi
 * @extends {BaseAPI}
 */
export class WorkloadsApi extends BaseAPI {
  /**
   * Endpoint to fetch dashboard to be displayed, related to a single workload
   * @param {string} namespace The namespace name.
   * @param {string} workload The workload name.
   * @param {boolean} [avg] Flag for fetching histogram average. Default is true.
   * @param {Array<string>} [byLabels] List of labels to use for grouping metrics (via Prometheus \&#39;by\&#39; clause).
   * @param {string} [direction] Traffic direction: \&#39;inbound\&#39; or \&#39;outbound\&#39;.
   * @param {number} [duration] Duration of the query period, in seconds.
   * @param {Array<string>} [quantiles] List of quantiles to fetch. Fetch no quantiles when empty. Ex: [0.5, 0.95, 0.99].
   * @param {string} [rateFunc] Prometheus function used to calculate rate: \&#39;rate\&#39; or \&#39;irate\&#39;.
   * @param {string} [rateInterval] Interval used for rate and histogram calculation.
   * @param {string} [requestProtocol] Desired request protocol for the telemetry: For example, \&#39;http\&#39; or \&#39;grpc\&#39;.
   * @param {string} [reporter] Istio telemetry reporter: \&#39;source\&#39; or \&#39;destination\&#39;.
   * @param {number} [step] Step between [graph] datapoints, in seconds.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WorkloadsApi
   */
  public workloadDashboard(
    namespace: string,
    workload: string,
    avg?: boolean,
    byLabels?: Array<string>,
    direction?: string,
    duration?: number,
    quantiles?: Array<string>,
    rateFunc?: string,
    rateInterval?: string,
    requestProtocol?: string,
    reporter?: string,
    step?: number,
    options?: any
  ) {
    return WorkloadsApiFp(this.configuration)
      .workloadDashboard(
        namespace,
        workload,
        avg,
        byLabels,
        direction,
        duration,
        quantiles,
        rateFunc,
        rateInterval,
        requestProtocol,
        reporter,
        step,
        options
      )
      .then(request => request(this.axios, this.basePath));
  }

  /**
   * Endpoint to get the workload details
   * @param {string} namespace The namespace name.
   * @param {string} workload The workload name.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WorkloadsApi
   */
  public workloadDetails(namespace: string, workload: string, options?: any) {
    return WorkloadsApiFp(this.configuration)
      .workloadDetails(namespace, workload, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   * Get health associated to the given workload
   * @param {string} namespace The namespace scope
   * @param {string} workload The target workload
   * @param {string} [rateInterval] The rate interval used for fetching error rate
   * @param {string} [queryTime] The time to use for the prometheus query
   * @param {string} [type]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WorkloadsApi
   */
  public workloadHealth(
    namespace: string,
    workload: string,
    rateInterval?: string,
    queryTime?: string,
    type?: string,
    options?: any
  ) {
    return WorkloadsApiFp(this.configuration)
      .workloadHealth(namespace, workload, rateInterval, queryTime, type, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   * Endpoint to get the list of workloads for a namespace
   * @param {string} namespace The namespace name.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WorkloadsApi
   */
  public workloadList(namespace: string, options?: any) {
    return WorkloadsApiFp(this.configuration)
      .workloadList(namespace, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   * Endpoint to fetch metrics to be displayed, related to a single workload
   * @param {string} namespace The namespace name.
   * @param {string} workload The workload name.
   * @param {boolean} [avg] Flag for fetching histogram average. Default is true.
   * @param {Array<string>} [byLabels] List of labels to use for grouping metrics (via Prometheus \&#39;by\&#39; clause).
   * @param {string} [direction] Traffic direction: \&#39;inbound\&#39; or \&#39;outbound\&#39;.
   * @param {number} [duration] Duration of the query period, in seconds.
   * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are Kiali internal metric names.
   * @param {Array<string>} [quantiles] List of quantiles to fetch. Fetch no quantiles when empty. Ex: [0.5, 0.95, 0.99].
   * @param {string} [rateFunc] Prometheus function used to calculate rate: \&#39;rate\&#39; or \&#39;irate\&#39;.
   * @param {string} [rateInterval] Interval used for rate and histogram calculation.
   * @param {string} [requestProtocol] Desired request protocol for the telemetry: For example, \&#39;http\&#39; or \&#39;grpc\&#39;.
   * @param {string} [reporter] Istio telemetry reporter: \&#39;source\&#39; or \&#39;destination\&#39;.
   * @param {number} [step] Step between [graph] datapoints, in seconds.
   * @param {string} [version] Filters metrics by the specified version.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WorkloadsApi
   */
  public workloadMetrics(
    namespace: string,
    workload: string,
    avg?: boolean,
    byLabels?: Array<string>,
    direction?: string,
    duration?: number,
    filters?: Array<string>,
    quantiles?: Array<string>,
    rateFunc?: string,
    rateInterval?: string,
    requestProtocol?: string,
    reporter?: string,
    step?: number,
    version?: string,
    options?: any
  ) {
    return WorkloadsApiFp(this.configuration)
      .workloadMetrics(
        namespace,
        workload,
        avg,
        byLabels,
        direction,
        duration,
        filters,
        quantiles,
        rateFunc,
        rateInterval,
        requestProtocol,
        reporter,
        step,
        version,
        options
      )
      .then(request => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Endpoint to update the Workload configuration using Json Merge Patch strategy.
   * @param {string} namespace The namespace name.
   * @param {string} workload The workload name.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WorkloadsApi
   */
  public workloadUpdate(namespace: string, workload: string, options?: any) {
    return WorkloadsApiFp(this.configuration)
      .workloadUpdate(namespace, workload, options)
      .then(request => request(this.axios, this.basePath));
  }
}

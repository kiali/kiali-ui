/* tslint:disable */
/* eslint-disable */
/**
 * Kiali
 * Kiali project, observability for the Istio service mesh
 *
 * The version of the OpenAPI document: _
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction
} from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { InlineResponse500 } from '../models';
// @ts-ignore
import { Iter8ExperimentDetail } from '../models';
// @ts-ignore
import { Iter8ExperimentItem } from '../models';
// @ts-ignore
import { Iter8Info } from '../models';
/**
 * Iter8Api - axios parameter creator
 * @export
 */
export const Iter8ApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * Endpoint to delete   iter8 experiments
     * @param {string} namespace The namespace name.
     * @param {string} name The name param
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteIter8Experiments: async (namespace: string, name: string, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'namespace' is not null or undefined
      assertParamExists('deleteIter8Experiments', 'namespace', namespace);
      // verify required parameter 'name' is not null or undefined
      assertParamExists('deleteIter8Experiments', 'name', name);
      const localVarPath = `/iter8/experiments/namespaces/{namespace}/name/{name}`
        .replace(`{${'namespace'}}`, encodeURIComponent(String(namespace)))
        .replace(`{${'name'}}`, encodeURIComponent(String(name)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Endpoint to fetch iter8 experiments by namespace and name
     * @param {string} namespace The namespace name.
     * @param {string} name The name param
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getIter8Experiments: async (namespace: string, name: string, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'namespace' is not null or undefined
      assertParamExists('getIter8Experiments', 'namespace', namespace);
      // verify required parameter 'name' is not null or undefined
      assertParamExists('getIter8Experiments', 'name', name);
      const localVarPath = `/iter8/namespaces/{namespace}/experiments/{name}`
        .replace(`{${'namespace'}}`, encodeURIComponent(String(namespace)))
        .replace(`{${'name'}}`, encodeURIComponent(String(name)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * User can define a comman separated list of namespaces.
     * @summary Endpoint to fetch iter8 experiments for all namespaces user have access.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    iter8Experiments: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/iter8/experiments`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Endpoint to update new iter8 experiment (for abort purpose)
     * @param {string} namespace The namespace name.
     * @param {string} name The name param
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchIter8Experiments: async (namespace: string, name: string, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'namespace' is not null or undefined
      assertParamExists('patchIter8Experiments', 'namespace', namespace);
      // verify required parameter 'name' is not null or undefined
      assertParamExists('patchIter8Experiments', 'name', name);
      const localVarPath = `/iter8/experiments/{namespace}/name/{name}`
        .replace(`{${'namespace'}}`, encodeURIComponent(String(namespace)))
        .replace(`{${'name'}}`, encodeURIComponent(String(name)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary Endpoint to create new iter8 experiments for a given namespace.
     * @param {string} namespace The namespace name.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postIter8Experiments: async (namespace: string, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'namespace' is not null or undefined
      assertParamExists('postIter8Experiments', 'namespace', namespace);
      const localVarPath = `/iter8/namespaces/{namespace}/experiments`.replace(
        `{${'namespace'}}`,
        encodeURIComponent(String(namespace))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};

/**
 * Iter8Api - functional programming interface
 * @export
 */
export const Iter8ApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = Iter8ApiAxiosParamCreator(configuration);
  return {
    /**
     * Endpoint to delete   iter8 experiments
     * @param {string} namespace The namespace name.
     * @param {string} name The name param
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteIter8Experiments(
      namespace: string,
      name: string,
      options?: any
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Iter8Info>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteIter8Experiments(namespace, name, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * Endpoint to fetch iter8 experiments by namespace and name
     * @param {string} namespace The namespace name.
     * @param {string} name The name param
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getIter8Experiments(
      namespace: string,
      name: string,
      options?: any
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Iter8ExperimentDetail>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getIter8Experiments(namespace, name, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * User can define a comman separated list of namespaces.
     * @summary Endpoint to fetch iter8 experiments for all namespaces user have access.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async iter8Experiments(
      options?: any
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Iter8ExperimentItem>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.iter8Experiments(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * Endpoint to update new iter8 experiment (for abort purpose)
     * @param {string} namespace The namespace name.
     * @param {string} name The name param
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async patchIter8Experiments(
      namespace: string,
      name: string,
      options?: any
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Iter8ExperimentDetail>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.patchIter8Experiments(namespace, name, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Endpoint to create new iter8 experiments for a given namespace.
     * @param {string} namespace The namespace name.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postIter8Experiments(
      namespace: string,
      options?: any
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Iter8ExperimentDetail>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.postIter8Experiments(namespace, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    }
  };
};

/**
 * Iter8Api - factory interface
 * @export
 */
export const Iter8ApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = Iter8ApiFp(configuration);
  return {
    /**
     * Endpoint to delete   iter8 experiments
     * @param {string} namespace The namespace name.
     * @param {string} name The name param
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteIter8Experiments(namespace: string, name: string, options?: any): AxiosPromise<Iter8Info> {
      return localVarFp.deleteIter8Experiments(namespace, name, options).then(request => request(axios, basePath));
    },
    /**
     * Endpoint to fetch iter8 experiments by namespace and name
     * @param {string} namespace The namespace name.
     * @param {string} name The name param
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getIter8Experiments(namespace: string, name: string, options?: any): AxiosPromise<Iter8ExperimentDetail> {
      return localVarFp.getIter8Experiments(namespace, name, options).then(request => request(axios, basePath));
    },
    /**
     * User can define a comman separated list of namespaces.
     * @summary Endpoint to fetch iter8 experiments for all namespaces user have access.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    iter8Experiments(options?: any): AxiosPromise<Array<Iter8ExperimentItem>> {
      return localVarFp.iter8Experiments(options).then(request => request(axios, basePath));
    },
    /**
     * Endpoint to update new iter8 experiment (for abort purpose)
     * @param {string} namespace The namespace name.
     * @param {string} name The name param
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchIter8Experiments(namespace: string, name: string, options?: any): AxiosPromise<Iter8ExperimentDetail> {
      return localVarFp.patchIter8Experiments(namespace, name, options).then(request => request(axios, basePath));
    },
    /**
     *
     * @summary Endpoint to create new iter8 experiments for a given namespace.
     * @param {string} namespace The namespace name.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postIter8Experiments(namespace: string, options?: any): AxiosPromise<Iter8ExperimentDetail> {
      return localVarFp.postIter8Experiments(namespace, options).then(request => request(axios, basePath));
    }
  };
};

/**
 * Iter8Api - object-oriented interface
 * @export
 * @class Iter8Api
 * @extends {BaseAPI}
 */
export class Iter8Api extends BaseAPI {
  /**
   * Endpoint to delete   iter8 experiments
   * @param {string} namespace The namespace name.
   * @param {string} name The name param
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof Iter8Api
   */
  public deleteIter8Experiments(namespace: string, name: string, options?: any) {
    return Iter8ApiFp(this.configuration)
      .deleteIter8Experiments(namespace, name, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   * Endpoint to fetch iter8 experiments by namespace and name
   * @param {string} namespace The namespace name.
   * @param {string} name The name param
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof Iter8Api
   */
  public getIter8Experiments(namespace: string, name: string, options?: any) {
    return Iter8ApiFp(this.configuration)
      .getIter8Experiments(namespace, name, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   * User can define a comman separated list of namespaces.
   * @summary Endpoint to fetch iter8 experiments for all namespaces user have access.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof Iter8Api
   */
  public iter8Experiments(options?: any) {
    return Iter8ApiFp(this.configuration)
      .iter8Experiments(options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   * Endpoint to update new iter8 experiment (for abort purpose)
   * @param {string} namespace The namespace name.
   * @param {string} name The name param
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof Iter8Api
   */
  public patchIter8Experiments(namespace: string, name: string, options?: any) {
    return Iter8ApiFp(this.configuration)
      .patchIter8Experiments(namespace, name, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Endpoint to create new iter8 experiments for a given namespace.
   * @param {string} namespace The namespace name.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof Iter8Api
   */
  public postIter8Experiments(namespace: string, options?: any) {
    return Iter8ApiFp(this.configuration)
      .postIter8Experiments(namespace, options)
      .then(request => request(this.axios, this.basePath));
  }
}

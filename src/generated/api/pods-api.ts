/* tslint:disable */
/* eslint-disable */
/**
 * Kiali
 * Kiali project, observability for the Istio service mesh
 *
 * The version of the OpenAPI document: _
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction
} from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { EnvoyProxyDump } from '../models';
// @ts-ignore
import { InlineResponse200 } from '../models';
// @ts-ignore
import { InlineResponse400 } from '../models';
// @ts-ignore
import { InlineResponse404 } from '../models';
// @ts-ignore
import { InlineResponse500 } from '../models';
// @ts-ignore
import { Workload } from '../models';
/**
 * PodsApi - axios parameter creator
 * @export
 */
export const PodsApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * Endpoint to get pod details
     * @param {string} namespace The namespace name.
     * @param {string} pod The pod name.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    podDetails: async (namespace: string, pod: string, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'namespace' is not null or undefined
      assertParamExists('podDetails', 'namespace', namespace);
      // verify required parameter 'pod' is not null or undefined
      assertParamExists('podDetails', 'pod', pod);
      const localVarPath = `/namespaces/{namespace}/pods/{pod}`
        .replace(`{${'namespace'}}`, encodeURIComponent(String(namespace)))
        .replace(`{${'pod'}}`, encodeURIComponent(String(pod)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Endpoint to get pod logs
     * @param {string} namespace The namespace name.
     * @param {string} pod The pod name.
     * @param {string} [container] The pod container name. Optional for single-container pod. Otherwise required.
     * @param {string} [sinceTime] The start time for fetching logs. UNIX time in seconds. Default is all logs.
     * @param {string} [duration] Query time-range duration (Golang string duration). Duration starts on &#x60;sinceTime&#x60; if set, or the time for the first log message if not set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    podLogs: async (
      namespace: string,
      pod: string,
      container?: string,
      sinceTime?: string,
      duration?: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'namespace' is not null or undefined
      assertParamExists('podLogs', 'namespace', namespace);
      // verify required parameter 'pod' is not null or undefined
      assertParamExists('podLogs', 'pod', pod);
      const localVarPath = `/namespaces/{namespace}/pods/{pod}/logs`
        .replace(`{${'namespace'}}`, encodeURIComponent(String(namespace)))
        .replace(`{${'pod'}}`, encodeURIComponent(String(pod)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (container !== undefined) {
        localVarQueryParameter['container'] = container;
      }

      if (sinceTime !== undefined) {
        localVarQueryParameter['sinceTime'] = sinceTime;
      }

      if (duration !== undefined) {
        localVarQueryParameter['duration'] = duration;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Endpoint to get pod proxy dump
     * @param {string} namespace The namespace name.
     * @param {string} pod The pod name.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    podProxyDump: async (namespace: string, pod: string, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'namespace' is not null or undefined
      assertParamExists('podProxyDump', 'namespace', namespace);
      // verify required parameter 'pod' is not null or undefined
      assertParamExists('podProxyDump', 'pod', pod);
      const localVarPath = `/namespaces/{namespace}/pods/{pod}/config_dump`
        .replace(`{${'namespace'}}`, encodeURIComponent(String(namespace)))
        .replace(`{${'pod'}}`, encodeURIComponent(String(pod)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Endpoint to set pod proxy log level
     * @param {'off' | 'trace' | 'debug' | 'info' | 'warning' | 'error' | 'critical'} level The log level for the pod\&#39;s proxy.
     * @param {string} namespace The namespace name.
     * @param {string} pod The pod name.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    podProxyLogging: async (
      level: 'off' | 'trace' | 'debug' | 'info' | 'warning' | 'error' | 'critical',
      namespace: string,
      pod: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'level' is not null or undefined
      assertParamExists('podProxyLogging', 'level', level);
      // verify required parameter 'namespace' is not null or undefined
      assertParamExists('podProxyLogging', 'namespace', namespace);
      // verify required parameter 'pod' is not null or undefined
      assertParamExists('podProxyLogging', 'pod', pod);
      const localVarPath = `/namespaces/{namespace}/pods/{pod}/logging`
        .replace(`{${'namespace'}}`, encodeURIComponent(String(namespace)))
        .replace(`{${'pod'}}`, encodeURIComponent(String(pod)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (level !== undefined) {
        localVarQueryParameter['level'] = level;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Endpoint to get pod logs
     * @param {string} namespace The namespace name.
     * @param {string} pod The pod name.
     * @param {string} resource The discovery service resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    podProxyResource: async (
      namespace: string,
      pod: string,
      resource: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'namespace' is not null or undefined
      assertParamExists('podProxyResource', 'namespace', namespace);
      // verify required parameter 'pod' is not null or undefined
      assertParamExists('podProxyResource', 'pod', pod);
      // verify required parameter 'resource' is not null or undefined
      assertParamExists('podProxyResource', 'resource', resource);
      const localVarPath = `/namespaces/{namespace}/pods/{pod}/config_dump/{resource}`
        .replace(`{${'namespace'}}`, encodeURIComponent(String(namespace)))
        .replace(`{${'pod'}}`, encodeURIComponent(String(pod)))
        .replace(`{${'resource'}}`, encodeURIComponent(String(resource)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};

/**
 * PodsApi - functional programming interface
 * @export
 */
export const PodsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = PodsApiAxiosParamCreator(configuration);
  return {
    /**
     * Endpoint to get pod details
     * @param {string} namespace The namespace name.
     * @param {string} pod The pod name.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async podDetails(
      namespace: string,
      pod: string,
      options?: any
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Workload>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.podDetails(namespace, pod, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * Endpoint to get pod logs
     * @param {string} namespace The namespace name.
     * @param {string} pod The pod name.
     * @param {string} [container] The pod container name. Optional for single-container pod. Otherwise required.
     * @param {string} [sinceTime] The start time for fetching logs. UNIX time in seconds. Default is all logs.
     * @param {string} [duration] Query time-range duration (Golang string duration). Duration starts on &#x60;sinceTime&#x60; if set, or the time for the first log message if not set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async podLogs(
      namespace: string,
      pod: string,
      container?: string,
      sinceTime?: string,
      duration?: string,
      options?: any
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Workload>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.podLogs(
        namespace,
        pod,
        container,
        sinceTime,
        duration,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * Endpoint to get pod proxy dump
     * @param {string} namespace The namespace name.
     * @param {string} pod The pod name.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async podProxyDump(
      namespace: string,
      pod: string,
      options?: any
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EnvoyProxyDump>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.podProxyDump(namespace, pod, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * Endpoint to set pod proxy log level
     * @param {'off' | 'trace' | 'debug' | 'info' | 'warning' | 'error' | 'critical'} level The log level for the pod\&#39;s proxy.
     * @param {string} namespace The namespace name.
     * @param {string} pod The pod name.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async podProxyLogging(
      level: 'off' | 'trace' | 'debug' | 'info' | 'warning' | 'error' | 'critical',
      namespace: string,
      pod: string,
      options?: any
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.podProxyLogging(level, namespace, pod, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * Endpoint to get pod logs
     * @param {string} namespace The namespace name.
     * @param {string} pod The pod name.
     * @param {string} resource The discovery service resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async podProxyResource(
      namespace: string,
      pod: string,
      resource: string,
      options?: any
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: object }>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.podProxyResource(namespace, pod, resource, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    }
  };
};

/**
 * PodsApi - factory interface
 * @export
 */
export const PodsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = PodsApiFp(configuration);
  return {
    /**
     * Endpoint to get pod details
     * @param {string} namespace The namespace name.
     * @param {string} pod The pod name.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    podDetails(namespace: string, pod: string, options?: any): AxiosPromise<Workload> {
      return localVarFp.podDetails(namespace, pod, options).then(request => request(axios, basePath));
    },
    /**
     * Endpoint to get pod logs
     * @param {string} namespace The namespace name.
     * @param {string} pod The pod name.
     * @param {string} [container] The pod container name. Optional for single-container pod. Otherwise required.
     * @param {string} [sinceTime] The start time for fetching logs. UNIX time in seconds. Default is all logs.
     * @param {string} [duration] Query time-range duration (Golang string duration). Duration starts on &#x60;sinceTime&#x60; if set, or the time for the first log message if not set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    podLogs(
      namespace: string,
      pod: string,
      container?: string,
      sinceTime?: string,
      duration?: string,
      options?: any
    ): AxiosPromise<Workload> {
      return localVarFp
        .podLogs(namespace, pod, container, sinceTime, duration, options)
        .then(request => request(axios, basePath));
    },
    /**
     * Endpoint to get pod proxy dump
     * @param {string} namespace The namespace name.
     * @param {string} pod The pod name.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    podProxyDump(namespace: string, pod: string, options?: any): AxiosPromise<EnvoyProxyDump> {
      return localVarFp.podProxyDump(namespace, pod, options).then(request => request(axios, basePath));
    },
    /**
     * Endpoint to set pod proxy log level
     * @param {'off' | 'trace' | 'debug' | 'info' | 'warning' | 'error' | 'critical'} level The log level for the pod\&#39;s proxy.
     * @param {string} namespace The namespace name.
     * @param {string} pod The pod name.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    podProxyLogging(
      level: 'off' | 'trace' | 'debug' | 'info' | 'warning' | 'error' | 'critical',
      namespace: string,
      pod: string,
      options?: any
    ): AxiosPromise<InlineResponse200> {
      return localVarFp.podProxyLogging(level, namespace, pod, options).then(request => request(axios, basePath));
    },
    /**
     * Endpoint to get pod logs
     * @param {string} namespace The namespace name.
     * @param {string} pod The pod name.
     * @param {string} resource The discovery service resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    podProxyResource(
      namespace: string,
      pod: string,
      resource: string,
      options?: any
    ): AxiosPromise<{ [key: string]: object }> {
      return localVarFp.podProxyResource(namespace, pod, resource, options).then(request => request(axios, basePath));
    }
  };
};

/**
 * PodsApi - object-oriented interface
 * @export
 * @class PodsApi
 * @extends {BaseAPI}
 */
export class PodsApi extends BaseAPI {
  /**
   * Endpoint to get pod details
   * @param {string} namespace The namespace name.
   * @param {string} pod The pod name.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PodsApi
   */
  public podDetails(namespace: string, pod: string, options?: any) {
    return PodsApiFp(this.configuration)
      .podDetails(namespace, pod, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   * Endpoint to get pod logs
   * @param {string} namespace The namespace name.
   * @param {string} pod The pod name.
   * @param {string} [container] The pod container name. Optional for single-container pod. Otherwise required.
   * @param {string} [sinceTime] The start time for fetching logs. UNIX time in seconds. Default is all logs.
   * @param {string} [duration] Query time-range duration (Golang string duration). Duration starts on &#x60;sinceTime&#x60; if set, or the time for the first log message if not set.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PodsApi
   */
  public podLogs(
    namespace: string,
    pod: string,
    container?: string,
    sinceTime?: string,
    duration?: string,
    options?: any
  ) {
    return PodsApiFp(this.configuration)
      .podLogs(namespace, pod, container, sinceTime, duration, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   * Endpoint to get pod proxy dump
   * @param {string} namespace The namespace name.
   * @param {string} pod The pod name.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PodsApi
   */
  public podProxyDump(namespace: string, pod: string, options?: any) {
    return PodsApiFp(this.configuration)
      .podProxyDump(namespace, pod, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   * Endpoint to set pod proxy log level
   * @param {'off' | 'trace' | 'debug' | 'info' | 'warning' | 'error' | 'critical'} level The log level for the pod\&#39;s proxy.
   * @param {string} namespace The namespace name.
   * @param {string} pod The pod name.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PodsApi
   */
  public podProxyLogging(
    level: 'off' | 'trace' | 'debug' | 'info' | 'warning' | 'error' | 'critical',
    namespace: string,
    pod: string,
    options?: any
  ) {
    return PodsApiFp(this.configuration)
      .podProxyLogging(level, namespace, pod, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   * Endpoint to get pod logs
   * @param {string} namespace The namespace name.
   * @param {string} pod The pod name.
   * @param {string} resource The discovery service resource
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PodsApi
   */
  public podProxyResource(namespace: string, pod: string, resource: string, options?: any) {
    return PodsApiFp(this.configuration)
      .podProxyResource(namespace, pod, resource, options)
      .then(request => request(this.axios, this.basePath));
  }
}

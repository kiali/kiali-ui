/* tslint:disable */
/* eslint-disable */
/**
 * Kiali
 * Kiali project, observability for the Istio service mesh
 *
 * The version of the OpenAPI document: _
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction
} from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { InlineResponse400 } from '../models';
// @ts-ignore
import { InlineResponse500 } from '../models';
// @ts-ignore
import { InlineResponse503 } from '../models';
// @ts-ignore
import { MetricsStats } from '../models';
// @ts-ignore
import { MetricsStatsQueries } from '../models';
/**
 * StatsApi - axios parameter creator
 * @export
 */
export const StatsApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * Produces metrics statistics
     * @param {MetricsStatsQueries} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    metricsStats: async (body?: MetricsStatsQueries, options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/stats/metrics`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};

/**
 * StatsApi - functional programming interface
 * @export
 */
export const StatsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = StatsApiAxiosParamCreator(configuration);
  return {
    /**
     * Produces metrics statistics
     * @param {MetricsStatsQueries} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async metricsStats(
      body?: MetricsStatsQueries,
      options?: any
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MetricsStats>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.metricsStats(body, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    }
  };
};

/**
 * StatsApi - factory interface
 * @export
 */
export const StatsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = StatsApiFp(configuration);
  return {
    /**
     * Produces metrics statistics
     * @param {MetricsStatsQueries} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    metricsStats(body?: MetricsStatsQueries, options?: any): AxiosPromise<MetricsStats> {
      return localVarFp.metricsStats(body, options).then(request => request(axios, basePath));
    }
  };
};

/**
 * StatsApi - object-oriented interface
 * @export
 * @class StatsApi
 * @extends {BaseAPI}
 */
export class StatsApi extends BaseAPI {
  /**
   * Produces metrics statistics
   * @param {MetricsStatsQueries} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof StatsApi
   */
  public metricsStats(body?: MetricsStatsQueries, options?: any) {
    return StatsApiFp(this.configuration)
      .metricsStats(body, options)
      .then(request => request(this.axios, this.basePath));
  }
}

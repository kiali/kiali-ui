/* tslint:disable */
/* eslint-disable */
/**
 * Kiali
 * Kiali project, observability for the Istio service mesh
 *
 * The version of the OpenAPI document: _
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction
} from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { InlineResponse400 } from '../models';
// @ts-ignore
import { InlineResponse500 } from '../models';
// @ts-ignore
import { MTLSStatus } from '../models';
/**
 * TlsApi - axios parameter creator
 * @export
 */
export const TlsApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * Get TLS status for the whole mesh
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    meshTls: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/mesh/tls`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Get TLS status for the given namespace
     * @param {string} namespace The namespace name.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    namespaceTls: async (namespace: string, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'namespace' is not null or undefined
      assertParamExists('namespaceTls', 'namespace', namespace);
      const localVarPath = `/namespaces/{namespace}/tls`.replace(
        `{${'namespace'}}`,
        encodeURIComponent(String(namespace))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};

/**
 * TlsApi - functional programming interface
 * @export
 */
export const TlsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = TlsApiAxiosParamCreator(configuration);
  return {
    /**
     * Get TLS status for the whole mesh
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async meshTls(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MTLSStatus>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.meshTls(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * Get TLS status for the given namespace
     * @param {string} namespace The namespace name.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async namespaceTls(
      namespace: string,
      options?: any
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MTLSStatus>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.namespaceTls(namespace, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    }
  };
};

/**
 * TlsApi - factory interface
 * @export
 */
export const TlsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = TlsApiFp(configuration);
  return {
    /**
     * Get TLS status for the whole mesh
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    meshTls(options?: any): AxiosPromise<MTLSStatus> {
      return localVarFp.meshTls(options).then(request => request(axios, basePath));
    },
    /**
     * Get TLS status for the given namespace
     * @param {string} namespace The namespace name.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    namespaceTls(namespace: string, options?: any): AxiosPromise<MTLSStatus> {
      return localVarFp.namespaceTls(namespace, options).then(request => request(axios, basePath));
    }
  };
};

/**
 * TlsApi - object-oriented interface
 * @export
 * @class TlsApi
 * @extends {BaseAPI}
 */
export class TlsApi extends BaseAPI {
  /**
   * Get TLS status for the whole mesh
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TlsApi
   */
  public meshTls(options?: any) {
    return TlsApiFp(this.configuration)
      .meshTls(options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   * Get TLS status for the given namespace
   * @param {string} namespace The namespace name.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TlsApi
   */
  public namespaceTls(namespace: string, options?: any) {
    return TlsApiFp(this.configuration)
      .namespaceTls(namespace, options)
      .then(request => request(this.axios, this.basePath));
  }
}

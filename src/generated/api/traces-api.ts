/* tslint:disable */
/* eslint-disable */
/**
 * Kiali
 * Kiali project, observability for the Istio service mesh
 *
 * The version of the OpenAPI document: _
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction
} from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { InlineResponse404 } from '../models';
// @ts-ignore
import { InlineResponse500 } from '../models';
// @ts-ignore
import { JaegerSpan } from '../models';
// @ts-ignore
import { Trace } from '../models';
/**
 * TracesApi - axios parameter creator
 * @export
 */
export const TracesApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * Endpoint to get Jaeger spans for a given app
     * @param {string} app The app name (label value).
     * @param {string} namespace The namespace name.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    appSpans: async (app: string, namespace: string, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'app' is not null or undefined
      assertParamExists('appSpans', 'app', app);
      // verify required parameter 'namespace' is not null or undefined
      assertParamExists('appSpans', 'namespace', namespace);
      const localVarPath = `/namespaces/{namespace}/apps/{app}/spans`
        .replace(`{${'app'}}`, encodeURIComponent(String(app)))
        .replace(`{${'namespace'}}`, encodeURIComponent(String(namespace)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Endpoint to get the traces of a given app
     * @param {string} app The app name (label value).
     * @param {string} namespace The namespace name.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    appTraces: async (app: string, namespace: string, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'app' is not null or undefined
      assertParamExists('appTraces', 'app', app);
      // verify required parameter 'namespace' is not null or undefined
      assertParamExists('appTraces', 'namespace', namespace);
      const localVarPath = `/namespaces/{namespace}/apps/{app}/traces`
        .replace(`{${'app'}}`, encodeURIComponent(String(app)))
        .replace(`{${'namespace'}}`, encodeURIComponent(String(namespace)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Endpoint to get the number of traces in error for a given service
     * @param {string} app The app name (label value).
     * @param {string} namespace The namespace name.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    errorTraces: async (app: string, namespace: string, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'app' is not null or undefined
      assertParamExists('errorTraces', 'app', app);
      // verify required parameter 'namespace' is not null or undefined
      assertParamExists('errorTraces', 'namespace', namespace);
      const localVarPath = `/namespaces/{namespace}/apps/{app}/errortraces`
        .replace(`{${'app'}}`, encodeURIComponent(String(app)))
        .replace(`{${'namespace'}}`, encodeURIComponent(String(namespace)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Endpoint to get Jaeger spans for a given service
     * @param {string} namespace The namespace name.
     * @param {string} service The service name.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    serviceSpans: async (namespace: string, service: string, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'namespace' is not null or undefined
      assertParamExists('serviceSpans', 'namespace', namespace);
      // verify required parameter 'service' is not null or undefined
      assertParamExists('serviceSpans', 'service', service);
      const localVarPath = `/namespaces/{namespace}/services/{service}/spans`
        .replace(`{${'namespace'}}`, encodeURIComponent(String(namespace)))
        .replace(`{${'service'}}`, encodeURIComponent(String(service)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Endpoint to get the traces of a given service
     * @param {string} namespace The namespace name.
     * @param {string} service The service name.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    serviceTraces: async (namespace: string, service: string, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'namespace' is not null or undefined
      assertParamExists('serviceTraces', 'namespace', namespace);
      // verify required parameter 'service' is not null or undefined
      assertParamExists('serviceTraces', 'service', service);
      const localVarPath = `/namespaces/{namespace}/services/{service}/traces`
        .replace(`{${'namespace'}}`, encodeURIComponent(String(namespace)))
        .replace(`{${'service'}}`, encodeURIComponent(String(service)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Endpoint to get a specific trace from ID
     * @param {string} traceID The trace ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    traceDetails: async (traceID: string, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'traceID' is not null or undefined
      assertParamExists('traceDetails', 'traceID', traceID);
      const localVarPath = `/traces/{traceID}`.replace(`{${'traceID'}}`, encodeURIComponent(String(traceID)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Endpoint to get Jaeger spans for a given workload
     * @param {string} namespace The namespace name.
     * @param {string} workload The workload name.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workloadSpans: async (namespace: string, workload: string, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'namespace' is not null or undefined
      assertParamExists('workloadSpans', 'namespace', namespace);
      // verify required parameter 'workload' is not null or undefined
      assertParamExists('workloadSpans', 'workload', workload);
      const localVarPath = `/namespaces/{namespace}/workloads/{workload}/spans`
        .replace(`{${'namespace'}}`, encodeURIComponent(String(namespace)))
        .replace(`{${'workload'}}`, encodeURIComponent(String(workload)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Endpoint to get the traces of a given workload
     * @param {string} namespace The namespace name.
     * @param {string} workload The workload name.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workloadTraces: async (namespace: string, workload: string, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'namespace' is not null or undefined
      assertParamExists('workloadTraces', 'namespace', namespace);
      // verify required parameter 'workload' is not null or undefined
      assertParamExists('workloadTraces', 'workload', workload);
      const localVarPath = `/namespaces/{namespace}/workloads/{workload}/traces`
        .replace(`{${'namespace'}}`, encodeURIComponent(String(namespace)))
        .replace(`{${'workload'}}`, encodeURIComponent(String(workload)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};

/**
 * TracesApi - functional programming interface
 * @export
 */
export const TracesApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = TracesApiAxiosParamCreator(configuration);
  return {
    /**
     * Endpoint to get Jaeger spans for a given app
     * @param {string} app The app name (label value).
     * @param {string} namespace The namespace name.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async appSpans(
      app: string,
      namespace: string,
      options?: any
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<JaegerSpan>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.appSpans(app, namespace, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * Endpoint to get the traces of a given app
     * @param {string} app The app name (label value).
     * @param {string} namespace The namespace name.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async appTraces(
      app: string,
      namespace: string,
      options?: any
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Trace>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.appTraces(app, namespace, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * Endpoint to get the number of traces in error for a given service
     * @param {string} app The app name (label value).
     * @param {string} namespace The namespace name.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async errorTraces(
      app: string,
      namespace: string,
      options?: any
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.errorTraces(app, namespace, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * Endpoint to get Jaeger spans for a given service
     * @param {string} namespace The namespace name.
     * @param {string} service The service name.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async serviceSpans(
      namespace: string,
      service: string,
      options?: any
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<JaegerSpan>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.serviceSpans(namespace, service, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * Endpoint to get the traces of a given service
     * @param {string} namespace The namespace name.
     * @param {string} service The service name.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async serviceTraces(
      namespace: string,
      service: string,
      options?: any
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Trace>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.serviceTraces(namespace, service, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * Endpoint to get a specific trace from ID
     * @param {string} traceID The trace ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async traceDetails(
      traceID: string,
      options?: any
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Trace>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.traceDetails(traceID, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * Endpoint to get Jaeger spans for a given workload
     * @param {string} namespace The namespace name.
     * @param {string} workload The workload name.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async workloadSpans(
      namespace: string,
      workload: string,
      options?: any
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<JaegerSpan>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.workloadSpans(namespace, workload, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * Endpoint to get the traces of a given workload
     * @param {string} namespace The namespace name.
     * @param {string} workload The workload name.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async workloadTraces(
      namespace: string,
      workload: string,
      options?: any
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Trace>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.workloadTraces(namespace, workload, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    }
  };
};

/**
 * TracesApi - factory interface
 * @export
 */
export const TracesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = TracesApiFp(configuration);
  return {
    /**
     * Endpoint to get Jaeger spans for a given app
     * @param {string} app The app name (label value).
     * @param {string} namespace The namespace name.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    appSpans(app: string, namespace: string, options?: any): AxiosPromise<Array<JaegerSpan>> {
      return localVarFp.appSpans(app, namespace, options).then(request => request(axios, basePath));
    },
    /**
     * Endpoint to get the traces of a given app
     * @param {string} app The app name (label value).
     * @param {string} namespace The namespace name.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    appTraces(app: string, namespace: string, options?: any): AxiosPromise<Array<Trace>> {
      return localVarFp.appTraces(app, namespace, options).then(request => request(axios, basePath));
    },
    /**
     * Endpoint to get the number of traces in error for a given service
     * @param {string} app The app name (label value).
     * @param {string} namespace The namespace name.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    errorTraces(app: string, namespace: string, options?: any): AxiosPromise<void> {
      return localVarFp.errorTraces(app, namespace, options).then(request => request(axios, basePath));
    },
    /**
     * Endpoint to get Jaeger spans for a given service
     * @param {string} namespace The namespace name.
     * @param {string} service The service name.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    serviceSpans(namespace: string, service: string, options?: any): AxiosPromise<Array<JaegerSpan>> {
      return localVarFp.serviceSpans(namespace, service, options).then(request => request(axios, basePath));
    },
    /**
     * Endpoint to get the traces of a given service
     * @param {string} namespace The namespace name.
     * @param {string} service The service name.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    serviceTraces(namespace: string, service: string, options?: any): AxiosPromise<Array<Trace>> {
      return localVarFp.serviceTraces(namespace, service, options).then(request => request(axios, basePath));
    },
    /**
     * Endpoint to get a specific trace from ID
     * @param {string} traceID The trace ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    traceDetails(traceID: string, options?: any): AxiosPromise<Array<Trace>> {
      return localVarFp.traceDetails(traceID, options).then(request => request(axios, basePath));
    },
    /**
     * Endpoint to get Jaeger spans for a given workload
     * @param {string} namespace The namespace name.
     * @param {string} workload The workload name.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workloadSpans(namespace: string, workload: string, options?: any): AxiosPromise<Array<JaegerSpan>> {
      return localVarFp.workloadSpans(namespace, workload, options).then(request => request(axios, basePath));
    },
    /**
     * Endpoint to get the traces of a given workload
     * @param {string} namespace The namespace name.
     * @param {string} workload The workload name.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workloadTraces(namespace: string, workload: string, options?: any): AxiosPromise<Array<Trace>> {
      return localVarFp.workloadTraces(namespace, workload, options).then(request => request(axios, basePath));
    }
  };
};

/**
 * TracesApi - object-oriented interface
 * @export
 * @class TracesApi
 * @extends {BaseAPI}
 */
export class TracesApi extends BaseAPI {
  /**
   * Endpoint to get Jaeger spans for a given app
   * @param {string} app The app name (label value).
   * @param {string} namespace The namespace name.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TracesApi
   */
  public appSpans(app: string, namespace: string, options?: any) {
    return TracesApiFp(this.configuration)
      .appSpans(app, namespace, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   * Endpoint to get the traces of a given app
   * @param {string} app The app name (label value).
   * @param {string} namespace The namespace name.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TracesApi
   */
  public appTraces(app: string, namespace: string, options?: any) {
    return TracesApiFp(this.configuration)
      .appTraces(app, namespace, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   * Endpoint to get the number of traces in error for a given service
   * @param {string} app The app name (label value).
   * @param {string} namespace The namespace name.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TracesApi
   */
  public errorTraces(app: string, namespace: string, options?: any) {
    return TracesApiFp(this.configuration)
      .errorTraces(app, namespace, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   * Endpoint to get Jaeger spans for a given service
   * @param {string} namespace The namespace name.
   * @param {string} service The service name.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TracesApi
   */
  public serviceSpans(namespace: string, service: string, options?: any) {
    return TracesApiFp(this.configuration)
      .serviceSpans(namespace, service, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   * Endpoint to get the traces of a given service
   * @param {string} namespace The namespace name.
   * @param {string} service The service name.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TracesApi
   */
  public serviceTraces(namespace: string, service: string, options?: any) {
    return TracesApiFp(this.configuration)
      .serviceTraces(namespace, service, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   * Endpoint to get a specific trace from ID
   * @param {string} traceID The trace ID.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TracesApi
   */
  public traceDetails(traceID: string, options?: any) {
    return TracesApiFp(this.configuration)
      .traceDetails(traceID, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   * Endpoint to get Jaeger spans for a given workload
   * @param {string} namespace The namespace name.
   * @param {string} workload The workload name.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TracesApi
   */
  public workloadSpans(namespace: string, workload: string, options?: any) {
    return TracesApiFp(this.configuration)
      .workloadSpans(namespace, workload, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   * Endpoint to get the traces of a given workload
   * @param {string} namespace The namespace name.
   * @param {string} workload The workload name.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TracesApi
   */
  public workloadTraces(namespace: string, workload: string, options?: any) {
    return TracesApiFp(this.configuration)
      .workloadTraces(namespace, workload, options)
      .then(request => request(this.axios, this.basePath));
  }
}

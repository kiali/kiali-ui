/* tslint:disable */
/* eslint-disable */
/**
 * Kiali
 * Kiali project, observability for the Istio service mesh
 *
 * The version of the OpenAPI document: _
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction
} from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AppHealth } from '../models';
// @ts-ignore
import { InlineResponse400 } from '../models';
// @ts-ignore
import { InlineResponse404 } from '../models';
// @ts-ignore
import { InlineResponse500 } from '../models';
// @ts-ignore
import { InlineResponse503 } from '../models';
// @ts-ignore
import { IstioValidationSummary } from '../models';
// @ts-ignore
import { Namespace } from '../models';
/**
 * NamespacesApi - axios parameter creator
 * @export
 */
export const NamespacesApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * Get health for all objects in the given namespace
     * @param {string} namespace The namespace scope
     * @param {string} [rateInterval] The rate interval used for fetching error rate
     * @param {string} [queryTime] The time to use for the prometheus query
     * @param {string} [type] The type of health, \&quot;app\&quot;, \&quot;service\&quot; or \&quot;workload\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    namespaceHealth: async (
      namespace: string,
      rateInterval?: string,
      queryTime?: string,
      type?: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'namespace' is not null or undefined
      assertParamExists('namespaceHealth', 'namespace', namespace);
      const localVarPath = `/namespaces/{namespace}/health`.replace(
        `{${'namespace'}}`,
        encodeURIComponent(String(namespace))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (rateInterval !== undefined) {
        localVarQueryParameter['rateInterval'] = rateInterval;
      }

      if (queryTime !== undefined) {
        localVarQueryParameter['QueryTime'] =
          (queryTime as any) instanceof Date ? (queryTime as any).toISOString() : queryTime;
      }

      if (type !== undefined) {
        localVarQueryParameter['type'] = type;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Endpoint to get the list of the available namespaces
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    namespaceList: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/namespaces`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Endpoint to fetch metrics to be displayed, related to a namespace
     * @param {string} namespace The namespace name.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    namespaceMetrics: async (namespace: string, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'namespace' is not null or undefined
      assertParamExists('namespaceMetrics', 'namespace', namespace);
      const localVarPath = `/namespaces/{namespace}/metrics`.replace(
        `{${'namespace'}}`,
        encodeURIComponent(String(namespace))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary Endpoint to update the Namespace configuration using Json Merge Patch strategy.
     * @param {string} namespace The namespace name.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    namespaceUpdate: async (namespace: string, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'namespace' is not null or undefined
      assertParamExists('namespaceUpdate', 'namespace', namespace);
      const localVarPath = `/namespaces/{namespace}`.replace(`{${'namespace'}}`, encodeURIComponent(String(namespace)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Get validation summary for all objects in the given namespace
     * @param {string} namespace The namespace name.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    namespaceValidations: async (namespace: string, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'namespace' is not null or undefined
      assertParamExists('namespaceValidations', 'namespace', namespace);
      const localVarPath = `/namespaces/{namespace}/validations`.replace(
        `{${'namespace'}}`,
        encodeURIComponent(String(namespace))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};

/**
 * NamespacesApi - functional programming interface
 * @export
 */
export const NamespacesApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = NamespacesApiAxiosParamCreator(configuration);
  return {
    /**
     * Get health for all objects in the given namespace
     * @param {string} namespace The namespace scope
     * @param {string} [rateInterval] The rate interval used for fetching error rate
     * @param {string} [queryTime] The time to use for the prometheus query
     * @param {string} [type] The type of health, \&quot;app\&quot;, \&quot;service\&quot; or \&quot;workload\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async namespaceHealth(
      namespace: string,
      rateInterval?: string,
      queryTime?: string,
      type?: string,
      options?: any
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: AppHealth }>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.namespaceHealth(
        namespace,
        rateInterval,
        queryTime,
        type,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * Endpoint to get the list of the available namespaces
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async namespaceList(
      options?: any
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Namespace>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.namespaceList(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * Endpoint to fetch metrics to be displayed, related to a namespace
     * @param {string} namespace The namespace name.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async namespaceMetrics(
      namespace: string,
      options?: any
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: Array<Metric> }>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.namespaceMetrics(namespace, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Endpoint to update the Namespace configuration using Json Merge Patch strategy.
     * @param {string} namespace The namespace name.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async namespaceUpdate(
      namespace: string,
      options?: any
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Namespace>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.namespaceUpdate(namespace, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * Get validation summary for all objects in the given namespace
     * @param {string} namespace The namespace name.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async namespaceValidations(
      namespace: string,
      options?: any
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IstioValidationSummary>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.namespaceValidations(namespace, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    }
  };
};

/**
 * NamespacesApi - factory interface
 * @export
 */
export const NamespacesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = NamespacesApiFp(configuration);
  return {
    /**
     * Get health for all objects in the given namespace
     * @param {string} namespace The namespace scope
     * @param {string} [rateInterval] The rate interval used for fetching error rate
     * @param {string} [queryTime] The time to use for the prometheus query
     * @param {string} [type] The type of health, \&quot;app\&quot;, \&quot;service\&quot; or \&quot;workload\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    namespaceHealth(
      namespace: string,
      rateInterval?: string,
      queryTime?: string,
      type?: string,
      options?: any
    ): AxiosPromise<{ [key: string]: AppHealth }> {
      return localVarFp
        .namespaceHealth(namespace, rateInterval, queryTime, type, options)
        .then(request => request(axios, basePath));
    },
    /**
     * Endpoint to get the list of the available namespaces
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    namespaceList(options?: any): AxiosPromise<Array<Namespace>> {
      return localVarFp.namespaceList(options).then(request => request(axios, basePath));
    },
    /**
     * Endpoint to fetch metrics to be displayed, related to a namespace
     * @param {string} namespace The namespace name.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    namespaceMetrics(namespace: string, options?: any): AxiosPromise<{ [key: string]: Array<Metric> }> {
      return localVarFp.namespaceMetrics(namespace, options).then(request => request(axios, basePath));
    },
    /**
     *
     * @summary Endpoint to update the Namespace configuration using Json Merge Patch strategy.
     * @param {string} namespace The namespace name.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    namespaceUpdate(namespace: string, options?: any): AxiosPromise<Namespace> {
      return localVarFp.namespaceUpdate(namespace, options).then(request => request(axios, basePath));
    },
    /**
     * Get validation summary for all objects in the given namespace
     * @param {string} namespace The namespace name.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    namespaceValidations(namespace: string, options?: any): AxiosPromise<IstioValidationSummary> {
      return localVarFp.namespaceValidations(namespace, options).then(request => request(axios, basePath));
    }
  };
};

/**
 * NamespacesApi - object-oriented interface
 * @export
 * @class NamespacesApi
 * @extends {BaseAPI}
 */
export class NamespacesApi extends BaseAPI {
  /**
   * Get health for all objects in the given namespace
   * @param {string} namespace The namespace scope
   * @param {string} [rateInterval] The rate interval used for fetching error rate
   * @param {string} [queryTime] The time to use for the prometheus query
   * @param {string} [type] The type of health, \&quot;app\&quot;, \&quot;service\&quot; or \&quot;workload\&quot;.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof NamespacesApi
   */
  public namespaceHealth(namespace: string, rateInterval?: string, queryTime?: string, type?: string, options?: any) {
    return NamespacesApiFp(this.configuration)
      .namespaceHealth(namespace, rateInterval, queryTime, type, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   * Endpoint to get the list of the available namespaces
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof NamespacesApi
   */
  public namespaceList(options?: any) {
    return NamespacesApiFp(this.configuration)
      .namespaceList(options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   * Endpoint to fetch metrics to be displayed, related to a namespace
   * @param {string} namespace The namespace name.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof NamespacesApi
   */
  public namespaceMetrics(namespace: string, options?: any) {
    return NamespacesApiFp(this.configuration)
      .namespaceMetrics(namespace, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Endpoint to update the Namespace configuration using Json Merge Patch strategy.
   * @param {string} namespace The namespace name.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof NamespacesApi
   */
  public namespaceUpdate(namespace: string, options?: any) {
    return NamespacesApiFp(this.configuration)
      .namespaceUpdate(namespace, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   * Get validation summary for all objects in the given namespace
   * @param {string} namespace The namespace name.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof NamespacesApi
   */
  public namespaceValidations(namespace: string, options?: any) {
    return NamespacesApiFp(this.configuration)
      .namespaceValidations(namespace, options)
      .then(request => request(this.axios, this.basePath));
  }
}

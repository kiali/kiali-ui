// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Overview page renders initial layout 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <OverviewPage
    history={
      Object {
        "action": "POP",
        "block": [Function],
        "createHref": [Function],
        "go": [Function],
        "goBack": [Function],
        "goForward": [Function],
        "length": 1,
        "listen": [Function],
        "location": Object {
          "hash": "",
          "pathname": "/",
          "search": "",
          "state": undefined,
        },
        "push": [Function],
        "replace": [Function],
      }
    }
    location={[MockFunction]}
    match={[MockFunction]}
    staticContext={[MockFunction]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": Array [
        <Breadcrumb
          title={true}
        >
          <BreadcrumbItem
            active={true}
          >
            Namespaces
          </BreadcrumbItem>
        </Breadcrumb>,
        <OverviewToolbar
          onError={[Function]}
          onRefresh={[Function]}
          pageHooks={
            OverviewPage {
              "context": Object {},
              "getQueryParam": [Function],
              "getSingleIntQueryParam": [Function],
              "getSingleQueryParam": [Function],
              "handleError": [Function],
              "handleNamespaceClick": [Function],
              "load": [Function],
              "props": Object {
                "history": Object {
                  "action": "POP",
                  "block": [Function],
                  "createHref": [Function],
                  "go": [Function],
                  "goBack": [Function],
                  "goForward": [Function],
                  "length": 1,
                  "listen": [Function],
                  "location": Object {
                    "hash": "",
                    "pathname": "/",
                    "search": "",
                    "state": undefined,
                  },
                  "push": [Function],
                  "replace": [Function],
                },
                "location": [MockFunction],
                "match": [MockFunction],
                "staticContext": [MockFunction],
              },
              "refs": Object {},
              "sort": [Function],
              "state": Object {
                "namespaces": Array [],
                "showEmpty": false,
              },
              "updater": Updater {
                "_callbacks": Array [],
                "_renderer": ReactShallowRenderer {
                  "_context": Object {},
                  "_element": <OverviewPage
                    history={
                      Object {
                        "action": "POP",
                        "block": [Function],
                        "createHref": [Function],
                        "go": [Function],
                        "goBack": [Function],
                        "goForward": [Function],
                        "length": 1,
                        "listen": [Function],
                        "location": Object {
                          "hash": "",
                          "pathname": "/",
                          "search": "",
                          "state": undefined,
                        },
                        "push": [Function],
                        "replace": [Function],
                      }
                    }
                    location={[MockFunction]}
                    match={[MockFunction]}
                    staticContext={[MockFunction]}
                  />,
                  "_forcedUpdate": false,
                  "_instance": [Circular],
                  "_newState": null,
                  "_rendered": <UNDEFINED>
                    <Breadcrumb
                      title={true}
                    >
                      <BreadcrumbItem
                        active={true}
                      >
                        Namespaces
                      </BreadcrumbItem>
                    </Breadcrumb>
                    <OverviewToolbar
                      onError={[Function]}
                      onRefresh={[Function]}
                      pageHooks={[Circular]}
                      sort={[Function]}
                    />
                    <div
                      className="cards-pf"
                    >
                      <CardGrid
                        className=""
                        matchHeight={true}
                      >
                        <Row
                          bsClass="row"
                          componentClass="div"
                          style={
                            Object {
                              "marginBottom": "20px",
                              "marginTop": "20px",
                            }
                          }
                        />
                      </CardGrid>
                    </div>
                  </UNDEFINED>,
                  "_rendering": false,
                  "_updater": [Circular],
                },
              },
            }
          }
          sort={[Function]}
        />,
        <div
          className="cards-pf"
        >
          <CardGrid
            className=""
            matchHeight={true}
          >
            <Row
              bsClass="row"
              componentClass="div"
              style={
                Object {
                  "marginBottom": "20px",
                  "marginTop": "20px",
                }
              }
            />
          </CardGrid>
        </div>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": <BreadcrumbItem
            active={true}
          >
            Namespaces
          </BreadcrumbItem>,
          "title": true,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "active": true,
            "children": "Namespaces",
          },
          "ref": null,
          "rendered": "Namespaces",
          "type": [Function],
        },
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "onError": [Function],
          "onRefresh": [Function],
          "pageHooks": OverviewPage {
            "context": Object {},
            "getQueryParam": [Function],
            "getSingleIntQueryParam": [Function],
            "getSingleQueryParam": [Function],
            "handleError": [Function],
            "handleNamespaceClick": [Function],
            "load": [Function],
            "props": Object {
              "history": Object {
                "action": "POP",
                "block": [Function],
                "createHref": [Function],
                "go": [Function],
                "goBack": [Function],
                "goForward": [Function],
                "length": 1,
                "listen": [Function],
                "location": Object {
                  "hash": "",
                  "pathname": "/",
                  "search": "",
                  "state": undefined,
                },
                "push": [Function],
                "replace": [Function],
              },
              "location": [MockFunction],
              "match": [MockFunction],
              "staticContext": [MockFunction],
            },
            "refs": Object {},
            "sort": [Function],
            "state": Object {
              "namespaces": Array [],
              "showEmpty": false,
            },
            "updater": Updater {
              "_callbacks": Array [],
              "_renderer": ReactShallowRenderer {
                "_context": Object {},
                "_element": <OverviewPage
                  history={
                    Object {
                      "action": "POP",
                      "block": [Function],
                      "createHref": [Function],
                      "go": [Function],
                      "goBack": [Function],
                      "goForward": [Function],
                      "length": 1,
                      "listen": [Function],
                      "location": Object {
                        "hash": "",
                        "pathname": "/",
                        "search": "",
                        "state": undefined,
                      },
                      "push": [Function],
                      "replace": [Function],
                    }
                  }
                  location={[MockFunction]}
                  match={[MockFunction]}
                  staticContext={[MockFunction]}
                />,
                "_forcedUpdate": false,
                "_instance": [Circular],
                "_newState": null,
                "_rendered": <UNDEFINED>
                  <Breadcrumb
                    title={true}
                  >
                    <BreadcrumbItem
                      active={true}
                    >
                      Namespaces
                    </BreadcrumbItem>
                  </Breadcrumb>
                  <OverviewToolbar
                    onError={[Function]}
                    onRefresh={[Function]}
                    pageHooks={[Circular]}
                    sort={[Function]}
                  />
                  <div
                    className="cards-pf"
                  >
                    <CardGrid
                      className=""
                      matchHeight={true}
                    >
                      <Row
                        bsClass="row"
                        componentClass="div"
                        style={
                          Object {
                            "marginBottom": "20px",
                            "marginTop": "20px",
                          }
                        }
                      />
                    </CardGrid>
                  </div>
                </UNDEFINED>,
                "_rendering": false,
                "_updater": [Circular],
              },
            },
          },
          "sort": [Function],
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <CardGrid
            className=""
            matchHeight={true}
          >
            <Row
              bsClass="row"
              componentClass="div"
              style={
                Object {
                  "marginBottom": "20px",
                  "marginTop": "20px",
                }
              }
            />
          </CardGrid>,
          "className": "cards-pf",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": <Row
              bsClass="row"
              componentClass="div"
              style={
                Object {
                  "marginBottom": "20px",
                  "marginTop": "20px",
                }
              }
            />,
            "className": "",
            "matchHeight": true,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "bsClass": "row",
              "children": Array [],
              "componentClass": "div",
              "style": Object {
                "marginBottom": "20px",
                "marginTop": "20px",
              },
            },
            "ref": null,
            "rendered": Array [],
            "type": [Function],
          },
          "type": [Function],
        },
        "type": "div",
      },
    ],
    "type": Symbol(react.fragment),
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <Breadcrumb
            title={true}
          >
            <BreadcrumbItem
              active={true}
            >
              Namespaces
            </BreadcrumbItem>
          </Breadcrumb>,
          <OverviewToolbar
            onError={[Function]}
            onRefresh={[Function]}
            pageHooks={
              OverviewPage {
                "context": Object {},
                "getQueryParam": [Function],
                "getSingleIntQueryParam": [Function],
                "getSingleQueryParam": [Function],
                "handleError": [Function],
                "handleNamespaceClick": [Function],
                "load": [Function],
                "props": Object {
                  "history": Object {
                    "action": "POP",
                    "block": [Function],
                    "createHref": [Function],
                    "go": [Function],
                    "goBack": [Function],
                    "goForward": [Function],
                    "length": 1,
                    "listen": [Function],
                    "location": Object {
                      "hash": "",
                      "pathname": "/",
                      "search": "",
                      "state": undefined,
                    },
                    "push": [Function],
                    "replace": [Function],
                  },
                  "location": [MockFunction],
                  "match": [MockFunction],
                  "staticContext": [MockFunction],
                },
                "refs": Object {},
                "sort": [Function],
                "state": Object {
                  "namespaces": Array [],
                  "showEmpty": false,
                },
                "updater": Updater {
                  "_callbacks": Array [],
                  "_renderer": ReactShallowRenderer {
                    "_context": Object {},
                    "_element": <OverviewPage
                      history={
                        Object {
                          "action": "POP",
                          "block": [Function],
                          "createHref": [Function],
                          "go": [Function],
                          "goBack": [Function],
                          "goForward": [Function],
                          "length": 1,
                          "listen": [Function],
                          "location": Object {
                            "hash": "",
                            "pathname": "/",
                            "search": "",
                            "state": undefined,
                          },
                          "push": [Function],
                          "replace": [Function],
                        }
                      }
                      location={[MockFunction]}
                      match={[MockFunction]}
                      staticContext={[MockFunction]}
                    />,
                    "_forcedUpdate": false,
                    "_instance": [Circular],
                    "_newState": null,
                    "_rendered": <UNDEFINED>
                      <Breadcrumb
                        title={true}
                      >
                        <BreadcrumbItem
                          active={true}
                        >
                          Namespaces
                        </BreadcrumbItem>
                      </Breadcrumb>
                      <OverviewToolbar
                        onError={[Function]}
                        onRefresh={[Function]}
                        pageHooks={[Circular]}
                        sort={[Function]}
                      />
                      <div
                        className="cards-pf"
                      >
                        <CardGrid
                          className=""
                          matchHeight={true}
                        >
                          <Row
                            bsClass="row"
                            componentClass="div"
                            style={
                              Object {
                                "marginBottom": "20px",
                                "marginTop": "20px",
                              }
                            }
                          />
                        </CardGrid>
                      </div>
                    </UNDEFINED>,
                    "_rendering": false,
                    "_updater": [Circular],
                  },
                },
              }
            }
            sort={[Function]}
          />,
          <div
            className="cards-pf"
          >
            <CardGrid
              className=""
              matchHeight={true}
            >
              <Row
                bsClass="row"
                componentClass="div"
                style={
                  Object {
                    "marginBottom": "20px",
                    "marginTop": "20px",
                  }
                }
              />
            </CardGrid>
          </div>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": <BreadcrumbItem
              active={true}
            >
              Namespaces
            </BreadcrumbItem>,
            "title": true,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "active": true,
              "children": "Namespaces",
            },
            "ref": null,
            "rendered": "Namespaces",
            "type": [Function],
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "onError": [Function],
            "onRefresh": [Function],
            "pageHooks": OverviewPage {
              "context": Object {},
              "getQueryParam": [Function],
              "getSingleIntQueryParam": [Function],
              "getSingleQueryParam": [Function],
              "handleError": [Function],
              "handleNamespaceClick": [Function],
              "load": [Function],
              "props": Object {
                "history": Object {
                  "action": "POP",
                  "block": [Function],
                  "createHref": [Function],
                  "go": [Function],
                  "goBack": [Function],
                  "goForward": [Function],
                  "length": 1,
                  "listen": [Function],
                  "location": Object {
                    "hash": "",
                    "pathname": "/",
                    "search": "",
                    "state": undefined,
                  },
                  "push": [Function],
                  "replace": [Function],
                },
                "location": [MockFunction],
                "match": [MockFunction],
                "staticContext": [MockFunction],
              },
              "refs": Object {},
              "sort": [Function],
              "state": Object {
                "namespaces": Array [],
                "showEmpty": false,
              },
              "updater": Updater {
                "_callbacks": Array [],
                "_renderer": ReactShallowRenderer {
                  "_context": Object {},
                  "_element": <OverviewPage
                    history={
                      Object {
                        "action": "POP",
                        "block": [Function],
                        "createHref": [Function],
                        "go": [Function],
                        "goBack": [Function],
                        "goForward": [Function],
                        "length": 1,
                        "listen": [Function],
                        "location": Object {
                          "hash": "",
                          "pathname": "/",
                          "search": "",
                          "state": undefined,
                        },
                        "push": [Function],
                        "replace": [Function],
                      }
                    }
                    location={[MockFunction]}
                    match={[MockFunction]}
                    staticContext={[MockFunction]}
                  />,
                  "_forcedUpdate": false,
                  "_instance": [Circular],
                  "_newState": null,
                  "_rendered": <UNDEFINED>
                    <Breadcrumb
                      title={true}
                    >
                      <BreadcrumbItem
                        active={true}
                      >
                        Namespaces
                      </BreadcrumbItem>
                    </Breadcrumb>
                    <OverviewToolbar
                      onError={[Function]}
                      onRefresh={[Function]}
                      pageHooks={[Circular]}
                      sort={[Function]}
                    />
                    <div
                      className="cards-pf"
                    >
                      <CardGrid
                        className=""
                        matchHeight={true}
                      >
                        <Row
                          bsClass="row"
                          componentClass="div"
                          style={
                            Object {
                              "marginBottom": "20px",
                              "marginTop": "20px",
                            }
                          }
                        />
                      </CardGrid>
                    </div>
                  </UNDEFINED>,
                  "_rendering": false,
                  "_updater": [Circular],
                },
              },
            },
            "sort": [Function],
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <CardGrid
              className=""
              matchHeight={true}
            >
              <Row
                bsClass="row"
                componentClass="div"
                style={
                  Object {
                    "marginBottom": "20px",
                    "marginTop": "20px",
                  }
                }
              />
            </CardGrid>,
            "className": "cards-pf",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": <Row
                bsClass="row"
                componentClass="div"
                style={
                  Object {
                    "marginBottom": "20px",
                    "marginTop": "20px",
                  }
                }
              />,
              "className": "",
              "matchHeight": true,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "bsClass": "row",
                "children": Array [],
                "componentClass": "div",
                "style": Object {
                  "marginBottom": "20px",
                  "marginTop": "20px",
                },
              },
              "ref": null,
              "rendered": Array [],
              "type": [Function],
            },
            "type": [Function],
          },
          "type": "div",
        },
      ],
      "type": Symbol(react.fragment),
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;
